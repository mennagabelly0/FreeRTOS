
RTOS_Deadlock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee0  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a0  080030a0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080030a0  080030a0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a0  080030a0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080030a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021e0  20000008  080030b0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021e8  080030b0  000221e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4a7  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bc8  00000000  00000000  0002b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  0002d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000658  00000000  00000000  0002d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002bc5  00000000  00000000  0002de18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007230  00000000  00000000  000309dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0001626f  00000000  00000000  00037c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004de7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b90  00000000  00000000  0004def8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08002ff8 	.word	0x08002ff8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08002ff8 	.word	0x08002ff8

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f103 0208 	add.w	r2, r3, #8
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f04f 32ff 	mov.w	r2, #4294967295
 8000198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f103 0208 	add.w	r2, r3, #8
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f103 0208 	add.w	r2, r3, #8
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001b4:	bf00      	nop
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr

080001be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001be:	b480      	push	{r7}
 80001c0:	b083      	sub	sp, #12
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001d6:	b480      	push	{r7}
 80001d8:	b085      	sub	sp, #20
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
 80001de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001ec:	d103      	bne.n	80001f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	691b      	ldr	r3, [r3, #16]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e00c      	b.n	8000210 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3308      	adds	r3, #8
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	e002      	b.n	8000204 <vListInsert+0x2e>
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	429a      	cmp	r2, r3
 800020e:	d2f6      	bcs.n	80001fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	683a      	ldr	r2, [r7, #0]
 800021e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	1c5a      	adds	r2, r3, #1
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	601a      	str	r2, [r3, #0]
}
 800023c:	bf00      	nop
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000246:	b480      	push	{r7}
 8000248:	b085      	sub	sp, #20
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	6892      	ldr	r2, [r2, #8]
 800025c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	429a      	cmp	r2, r3
 8000270:	d103      	bne.n	800027a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	689a      	ldr	r2, [r3, #8]
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1e5a      	subs	r2, r3, #1
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d063      	beq.n	8000378 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d05f      	beq.n	8000378 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002c0:	2000      	movs	r0, #0
 80002c2:	fba2 1203 	umull	r1, r2, r2, r3
 80002c6:	f04f 0300 	mov.w	r3, #0
 80002ca:	f04f 0400 	mov.w	r4, #0
 80002ce:	0013      	movs	r3, r2
 80002d0:	2400      	movs	r4, #0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d000      	beq.n	80002d8 <xQueueGenericReset+0x40>
 80002d6:	2001      	movs	r0, #1
 80002d8:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14c      	bne.n	8000378 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 80002de:	f001 fc65 	bl	8001bac <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002ea:	68b9      	ldr	r1, [r7, #8]
 80002ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002ee:	fb01 f303 	mul.w	r3, r1, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	2200      	movs	r2, #0
 80002fc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800030e:	3b01      	subs	r3, #1
 8000310:	68b9      	ldr	r1, [r7, #8]
 8000312:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000314:	fb01 f303 	mul.w	r3, r1, r3
 8000318:	441a      	add	r2, r3
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	22ff      	movs	r2, #255	; 0xff
 8000322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	22ff      	movs	r2, #255	; 0xff
 800032a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d114      	bne.n	800035e <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d01a      	beq.n	8000372 <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	3310      	adds	r3, #16
 8000340:	4618      	mov	r0, r3
 8000342:	f000 ff7d 	bl	8001240 <xTaskRemoveFromEventList>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d012      	beq.n	8000372 <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <xQueueGenericReset+0xf0>)
 800034e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	f3bf 8f4f 	dsb	sy
 8000358:	f3bf 8f6f 	isb	sy
 800035c:	e009      	b.n	8000372 <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	3310      	adds	r3, #16
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff0c 	bl	8000180 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	3324      	adds	r3, #36	; 0x24
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff07 	bl	8000180 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8000372:	f001 fc33 	bl	8001bdc <vPortExitCritical>
 8000376:	e001      	b.n	800037c <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800037c:	68fb      	ldr	r3, [r7, #12]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bd90      	pop	{r4, r7, pc}
 8000386:	bf00      	nop
 8000388:	e000ed04 	.word	0xe000ed04

0800038c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b08b      	sub	sp, #44	; 0x2c
 8000390:	af02      	add	r7, sp, #8
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	4613      	mov	r3, r2
 8000398:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d033      	beq.n	800040c <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003a4:	2000      	movs	r0, #0
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	fba2 1203 	umull	r1, r2, r2, r3
 80003ae:	f04f 0300 	mov.w	r3, #0
 80003b2:	f04f 0400 	mov.w	r4, #0
 80003b6:	0013      	movs	r3, r2
 80003b8:	2400      	movs	r4, #0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d000      	beq.n	80003c0 <xQueueGenericCreate+0x34>
 80003be:	2001      	movs	r0, #1
 80003c0:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d122      	bne.n	800040c <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003ce:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80003d2:	d81b      	bhi.n	800040c <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	fb02 f303 	mul.w	r3, r2, r3
 80003dc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	3350      	adds	r3, #80	; 0x50
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fc72 	bl	8001ccc <pvPortMalloc>
 80003e8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d00d      	beq.n	800040c <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	3350      	adds	r3, #80	; 0x50
 80003f8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	4613      	mov	r3, r2
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f000 f805 	bl	8000416 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800040c:	69fb      	ldr	r3, [r7, #28]
    }
 800040e:	4618      	mov	r0, r3
 8000410:	3724      	adds	r7, #36	; 0x24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd90      	pop	{r4, r7, pc}

08000416 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d103      	bne.n	8000432 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	69ba      	ldr	r2, [r7, #24]
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	e002      	b.n	8000438 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000432:	69bb      	ldr	r3, [r7, #24]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000444:	2101      	movs	r1, #1
 8000446:	69b8      	ldr	r0, [r7, #24]
 8000448:	f7ff ff26 	bl	8000298 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800044c:	69bb      	ldr	r3, [r7, #24]
 800044e:	78fa      	ldrb	r2, [r7, #3]
 8000450:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
 8000468:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800046a:	2300      	movs	r3, #0
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000472:	f001 fb9b 	bl	8001bac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000476:	6a3b      	ldr	r3, [r7, #32]
 8000478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800047a:	6a3b      	ldr	r3, [r7, #32]
 800047c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800047e:	429a      	cmp	r2, r3
 8000480:	d302      	bcc.n	8000488 <xQueueGenericSend+0x2c>
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d129      	bne.n	80004dc <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	68b9      	ldr	r1, [r7, #8]
 800048c:	6a38      	ldr	r0, [r7, #32]
 800048e:	f000 f96e 	bl	800076e <prvCopyDataToQueue>
 8000492:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000494:	6a3b      	ldr	r3, [r7, #32]
 8000496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000498:	2b00      	cmp	r3, #0
 800049a:	d010      	beq.n	80004be <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800049c:	6a3b      	ldr	r3, [r7, #32]
 800049e:	3324      	adds	r3, #36	; 0x24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fecd 	bl	8001240 <xTaskRemoveFromEventList>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d013      	beq.n	80004d4 <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80004ac:	4b3f      	ldr	r3, [pc, #252]	; (80005ac <xQueueGenericSend+0x150>)
 80004ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	f3bf 8f6f 	isb	sy
 80004bc:	e00a      	b.n	80004d4 <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d007      	beq.n	80004d4 <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80004c4:	4b39      	ldr	r3, [pc, #228]	; (80005ac <xQueueGenericSend+0x150>)
 80004c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	f3bf 8f4f 	dsb	sy
 80004d0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80004d4:	f001 fb82 	bl	8001bdc <vPortExitCritical>
                return pdPASS;
 80004d8:	2301      	movs	r3, #1
 80004da:	e063      	b.n	80005a4 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d103      	bne.n	80004ea <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80004e2:	f001 fb7b 	bl	8001bdc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	e05c      	b.n	80005a4 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80004ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d106      	bne.n	80004fe <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 ff6b 	bl	80013d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80004fa:	2301      	movs	r3, #1
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80004fe:	f001 fb6d 	bl	8001bdc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000502:	f000 fc2b 	bl	8000d5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000506:	f001 fb51 	bl	8001bac <vPortEnterCritical>
 800050a:	6a3b      	ldr	r3, [r7, #32]
 800050c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000510:	b25b      	sxtb	r3, r3
 8000512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000516:	d103      	bne.n	8000520 <xQueueGenericSend+0xc4>
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000520:	6a3b      	ldr	r3, [r7, #32]
 8000522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000526:	b25b      	sxtb	r3, r3
 8000528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800052c:	d103      	bne.n	8000536 <xQueueGenericSend+0xda>
 800052e:	6a3b      	ldr	r3, [r7, #32]
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000536:	f001 fb51 	bl	8001bdc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800053a:	1d3a      	adds	r2, r7, #4
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f000 ff5a 	bl	80013fc <xTaskCheckForTimeOut>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d124      	bne.n	8000598 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800054e:	6a38      	ldr	r0, [r7, #32]
 8000550:	f000 f9df 	bl	8000912 <prvIsQueueFull>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d018      	beq.n	800058c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	3310      	adds	r3, #16
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fe56 	bl	8001214 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000568:	6a38      	ldr	r0, [r7, #32]
 800056a:	f000 f96a 	bl	8000842 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800056e:	f000 fc03 	bl	8000d78 <xTaskResumeAll>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	f47f af7c 	bne.w	8000472 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <xQueueGenericSend+0x150>)
 800057c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	f3bf 8f4f 	dsb	sy
 8000586:	f3bf 8f6f 	isb	sy
 800058a:	e772      	b.n	8000472 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800058c:	6a38      	ldr	r0, [r7, #32]
 800058e:	f000 f958 	bl	8000842 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000592:	f000 fbf1 	bl	8000d78 <xTaskResumeAll>
 8000596:	e76c      	b.n	8000472 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000598:	6a38      	ldr	r0, [r7, #32]
 800059a:	f000 f952 	bl	8000842 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800059e:	f000 fbeb 	bl	8000d78 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80005a2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3728      	adds	r7, #40	; 0x28
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	e000ed04 	.word	0xe000ed04

080005b0 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005c6:	f001 faf1 	bl	8001bac <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ce:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d024      	beq.n	8000620 <xQueueSemaphoreTake+0x70>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d104      	bne.n	80005f0 <xQueueSemaphoreTake+0x40>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80005e6:	f001 f9c3 	bl	8001970 <pvTaskIncrementMutexHeldCount>
 80005ea:	4602      	mov	r2, r0
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00f      	beq.n	8000618 <xQueueSemaphoreTake+0x68>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	3310      	adds	r3, #16
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe1f 	bl	8001240 <xTaskRemoveFromEventList>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d007      	beq.n	8000618 <xQueueSemaphoreTake+0x68>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000608:	4b4c      	ldr	r3, [pc, #304]	; (800073c <xQueueSemaphoreTake+0x18c>)
 800060a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	f3bf 8f4f 	dsb	sy
 8000614:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000618:	f001 fae0 	bl	8001bdc <vPortExitCritical>
                return pdPASS;
 800061c:	2301      	movs	r3, #1
 800061e:	e089      	b.n	8000734 <xQueueSemaphoreTake+0x184>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <xQueueSemaphoreTake+0x7e>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000626:	f001 fad9 	bl	8001bdc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800062a:	2300      	movs	r3, #0
 800062c:	e082      	b.n	8000734 <xQueueSemaphoreTake+0x184>
                }
                else if( xEntryTimeSet == pdFALSE )
 800062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000630:	2b00      	cmp	r3, #0
 8000632:	d106      	bne.n	8000642 <xQueueSemaphoreTake+0x92>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fec9 	bl	80013d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800063e:	2301      	movs	r3, #1
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000642:	f001 facb 	bl	8001bdc <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000646:	f000 fb89 	bl	8000d5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800064a:	f001 faaf 	bl	8001bac <vPortEnterCritical>
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000654:	b25b      	sxtb	r3, r3
 8000656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065a:	d103      	bne.n	8000664 <xQueueSemaphoreTake+0xb4>
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800066a:	b25b      	sxtb	r3, r3
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000670:	d103      	bne.n	800067a <xQueueSemaphoreTake+0xca>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800067a:	f001 faaf 	bl	8001bdc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800067e:	463a      	mov	r2, r7
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 feb8 	bl	80013fc <xTaskCheckForTimeOut>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d132      	bne.n	80006f8 <xQueueSemaphoreTake+0x148>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000692:	69f8      	ldr	r0, [r7, #28]
 8000694:	f000 f927 	bl	80008e6 <prvIsQueueEmpty>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d026      	beq.n	80006ec <xQueueSemaphoreTake+0x13c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d109      	bne.n	80006ba <xQueueSemaphoreTake+0x10a>
                        {
                            taskENTER_CRITICAL();
 80006a6:	f001 fa81 	bl	8001bac <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ffa8 	bl	8001604 <xTaskPriorityInherit>
 80006b4:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 80006b6:	f001 fa91 	bl	8001bdc <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3324      	adds	r3, #36	; 0x24
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4611      	mov	r1, r2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fda6 	bl	8001214 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80006c8:	69f8      	ldr	r0, [r7, #28]
 80006ca:	f000 f8ba 	bl	8000842 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80006ce:	f000 fb53 	bl	8000d78 <xTaskResumeAll>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f47f af76 	bne.w	80005c6 <xQueueSemaphoreTake+0x16>
                {
                    portYIELD_WITHIN_API();
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <xQueueSemaphoreTake+0x18c>)
 80006dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	f3bf 8f4f 	dsb	sy
 80006e6:	f3bf 8f6f 	isb	sy
 80006ea:	e76c      	b.n	80005c6 <xQueueSemaphoreTake+0x16>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80006ec:	69f8      	ldr	r0, [r7, #28]
 80006ee:	f000 f8a8 	bl	8000842 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006f2:	f000 fb41 	bl	8000d78 <xTaskResumeAll>
 80006f6:	e766      	b.n	80005c6 <xQueueSemaphoreTake+0x16>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80006f8:	69f8      	ldr	r0, [r7, #28]
 80006fa:	f000 f8a2 	bl	8000842 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006fe:	f000 fb3b 	bl	8000d78 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000702:	69f8      	ldr	r0, [r7, #28]
 8000704:	f000 f8ef 	bl	80008e6 <prvIsQueueEmpty>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	f43f af5b 	beq.w	80005c6 <xQueueSemaphoreTake+0x16>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00d      	beq.n	8000732 <xQueueSemaphoreTake+0x182>
                        {
                            taskENTER_CRITICAL();
 8000716:	f001 fa49 	bl	8001bac <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800071a:	69f8      	ldr	r0, [r7, #28]
 800071c:	f000 f810 	bl	8000740 <prvGetDisinheritPriorityAfterTimeout>
 8000720:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6979      	ldr	r1, [r7, #20]
 8000728:	4618      	mov	r0, r3
 800072a:	f001 f88b 	bl	8001844 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800072e:	f001 fa55 	bl	8001bdc <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000732:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000734:	4618      	mov	r0, r3
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	e000ed04 	.word	0xe000ed04

08000740 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f1c3 0305 	rsb	r3, r3, #5
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e001      	b.n	8000762 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000762:	68fb      	ldr	r3, [r7, #12]
    }
 8000764:	4618      	mov	r0, r3
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000782:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10d      	bne.n	80007a8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d14d      	bne.n	8000830 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 ffd1 	bl	8001740 <xTaskPriorityDisinherit>
 800079e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	e043      	b.n	8000830 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d119      	bne.n	80007e2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6858      	ldr	r0, [r3, #4]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	461a      	mov	r2, r3
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	f002 fc09 	bl	8002fd0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	441a      	add	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d32b      	bcc.n	8000830 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	e026      	b.n	8000830 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	68d8      	ldr	r0, [r3, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	461a      	mov	r2, r3
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	f002 fbef 	bl	8002fd0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	425b      	negs	r3, r3
 80007fc:	441a      	add	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	68da      	ldr	r2, [r3, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d207      	bcs.n	800081e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	689a      	ldr	r2, [r3, #8]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	425b      	negs	r3, r3
 8000818:	441a      	add	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d105      	bne.n	8000830 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	3b01      	subs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000838:	697b      	ldr	r3, [r7, #20]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800084a:	f001 f9af 	bl	8001bac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000854:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000856:	e011      	b.n	800087c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085c:	2b00      	cmp	r3, #0
 800085e:	d012      	beq.n	8000886 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3324      	adds	r3, #36	; 0x24
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fceb 	bl	8001240 <xTaskRemoveFromEventList>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000870:	f000 fe0e 	bl	8001490 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	3b01      	subs	r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800087c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000880:	2b00      	cmp	r3, #0
 8000882:	dce9      	bgt.n	8000858 <prvUnlockQueue+0x16>
 8000884:	e000      	b.n	8000888 <prvUnlockQueue+0x46>
                        break;
 8000886:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000890:	f001 f9a4 	bl	8001bdc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000894:	f001 f98a 	bl	8001bac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800089e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008a0:	e011      	b.n	80008c6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d012      	beq.n	80008d0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3310      	adds	r3, #16
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fcc6 	bl	8001240 <xTaskRemoveFromEventList>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80008ba:	f000 fde9 	bl	8001490 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	dce9      	bgt.n	80008a2 <prvUnlockQueue+0x60>
 80008ce:	e000      	b.n	80008d2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80008d0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	22ff      	movs	r2, #255	; 0xff
 80008d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80008da:	f001 f97f 	bl	8001bdc <vPortExitCritical>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80008ee:	f001 f95d 	bl	8001bac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e001      	b.n	8000904 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000904:	f001 f96a 	bl	8001bdc <vPortExitCritical>

    return xReturn;
 8000908:	68fb      	ldr	r3, [r7, #12]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800091a:	f001 f947 	bl	8001bac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000926:	429a      	cmp	r2, r3
 8000928:	d102      	bne.n	8000930 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800092a:	2301      	movs	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e001      	b.n	8000934 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000934:	f001 f952 	bl	8001bdc <vPortExitCritical>

    return xReturn;
 8000938:	68fb      	ldr	r3, [r7, #12]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000942:	b580      	push	{r7, lr}
 8000944:	b08c      	sub	sp, #48	; 0x30
 8000946:	af04      	add	r7, sp, #16
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4613      	mov	r3, r2
 8000950:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f9b8 	bl	8001ccc <pvPortMalloc>
 800095c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00e      	beq.n	8000982 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000964:	205c      	movs	r0, #92	; 0x5c
 8000966:	f001 f9b1 	bl	8001ccc <pvPortMalloc>
 800096a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	631a      	str	r2, [r3, #48]	; 0x30
 8000978:	e005      	b.n	8000986 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f001 fa54 	bl	8001e28 <vPortFree>
 8000980:	e001      	b.n	8000986 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d013      	beq.n	80009b4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800098c:	88fa      	ldrh	r2, [r7, #6]
 800098e:	2300      	movs	r3, #0
 8000990:	9303      	str	r3, [sp, #12]
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f000 f80e 	bl	80009c4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80009a8:	69f8      	ldr	r0, [r7, #28]
 80009aa:	f000 f891 	bl	8000ad0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	e002      	b.n	80009ba <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80009ba:	69bb      	ldr	r3, [r7, #24]
    }
 80009bc:	4618      	mov	r0, r3
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80009d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	461a      	mov	r2, r3
 80009dc:	21a5      	movs	r1, #165	; 0xa5
 80009de:	f002 fb02 	bl	8002fe6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009ec:	3b01      	subs	r3, #1
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d01f      	beq.n	8000a42 <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e012      	b.n	8000a2e <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	7819      	ldrb	r1, [r3, #0]
 8000a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	4413      	add	r3, r2
 8000a16:	3334      	adds	r3, #52	; 0x34
 8000a18:	460a      	mov	r2, r1
 8000a1a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d9e9      	bls.n	8000a08 <prvInitialiseNewTask+0x44>
 8000a34:	e000      	b.n	8000a38 <prvInitialiseNewTask+0x74>
            {
                break;
 8000a36:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000a40:	e003      	b.n	8000a4a <prvInitialiseNewTask+0x86>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d901      	bls.n	8000a54 <prvInitialiseNewTask+0x90>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a50:	2304      	movs	r3, #4
 8000a52:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a56:	6a3a      	ldr	r2, [r7, #32]
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5c:	6a3a      	ldr	r2, [r7, #32]
 8000a5e:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	2200      	movs	r2, #0
 8000a64:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	3304      	adds	r3, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fba7 	bl	80001be <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	3318      	adds	r3, #24
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fba2 	bl	80001be <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a7e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	f1c3 0205 	rsb	r2, r3, #5
 8000a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a88:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	3354      	adds	r3, #84	; 0x54
 8000a94:	2204      	movs	r2, #4
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 faa4 	bl	8002fe6 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa0:	3358      	adds	r3, #88	; 0x58
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fa9d 	bl	8002fe6 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	6938      	ldr	r0, [r7, #16]
 8000ab2:	f000 fff1 	bl	8001a98 <pxPortInitialiseStack>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ac8:	bf00      	nop
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ad8:	f001 f868 	bl	8001bac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000adc:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <prvAddNewTaskToReadyList+0x110>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	; (8000be0 <prvAddNewTaskToReadyList+0x110>)
 8000ae4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	; (8000be4 <prvAddNewTaskToReadyList+0x114>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d109      	bne.n	8000b02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000aee:	4a3d      	ldr	r2, [pc, #244]	; (8000be4 <prvAddNewTaskToReadyList+0x114>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000af4:	4b3a      	ldr	r3, [pc, #232]	; (8000be0 <prvAddNewTaskToReadyList+0x110>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d110      	bne.n	8000b1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000afc:	f000 fcec 	bl	80014d8 <prvInitialiseTaskLists>
 8000b00:	e00d      	b.n	8000b1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000b02:	4b39      	ldr	r3, [pc, #228]	; (8000be8 <prvAddNewTaskToReadyList+0x118>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d109      	bne.n	8000b1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b0a:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <prvAddNewTaskToReadyList+0x114>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d802      	bhi.n	8000b1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000b18:	4a32      	ldr	r2, [pc, #200]	; (8000be4 <prvAddNewTaskToReadyList+0x114>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <prvAddNewTaskToReadyList+0x11c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	4a31      	ldr	r2, [pc, #196]	; (8000bec <prvAddNewTaskToReadyList+0x11c>)
 8000b26:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000b28:	4b30      	ldr	r3, [pc, #192]	; (8000bec <prvAddNewTaskToReadyList+0x11c>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	2201      	movs	r2, #1
 8000b36:	409a      	lsls	r2, r3
 8000b38:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <prvAddNewTaskToReadyList+0x120>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	4a2c      	ldr	r2, [pc, #176]	; (8000bf0 <prvAddNewTaskToReadyList+0x120>)
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b46:	492b      	ldr	r1, [pc, #172]	; (8000bf4 <prvAddNewTaskToReadyList+0x124>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	440b      	add	r3, r1
 8000b52:	3304      	adds	r3, #4
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	3204      	adds	r2, #4
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	1d1a      	adds	r2, r3, #4
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <prvAddNewTaskToReadyList+0x124>)
 8000b86:	441a      	add	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b90:	4918      	ldr	r1, [pc, #96]	; (8000bf4 <prvAddNewTaskToReadyList+0x124>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1c59      	adds	r1, r3, #1
 8000ba0:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <prvAddNewTaskToReadyList+0x124>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4403      	add	r3, r0
 8000bac:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000bae:	f001 f815 	bl	8001bdc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <prvAddNewTaskToReadyList+0x118>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00e      	beq.n	8000bd8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <prvAddNewTaskToReadyList+0x114>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <prvAddNewTaskToReadyList+0x128>)
 8000bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	f3bf 8f4f 	dsb	sy
 8000bd4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000fc 	.word	0x200000fc
 8000be4:	20000024 	.word	0x20000024
 8000be8:	20000108 	.word	0x20000108
 8000bec:	20000118 	.word	0x20000118
 8000bf0:	20000104 	.word	0x20000104
 8000bf4:	20000028 	.word	0x20000028
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );
        configASSERT( uxSchedulerSuspended == 0 );

        vTaskSuspendAll();
 8000c0a:	f000 f8a7 	bl	8000d5c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <xTaskDelayUntil+0x9c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d20b      	bcs.n	8000c40 <xTaskDelayUntil+0x44>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d211      	bcs.n	8000c56 <xTaskDelayUntil+0x5a>
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d90d      	bls.n	8000c56 <xTaskDelayUntil+0x5a>
                {
                    xShouldDelay = pdTRUE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e00a      	b.n	8000c56 <xTaskDelayUntil+0x5a>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d303      	bcc.n	8000c52 <xTaskDelayUntil+0x56>
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d901      	bls.n	8000c56 <xTaskDelayUntil+0x5a>
                {
                    xShouldDelay = pdTRUE;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <xTaskDelayUntil+0x74>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fe94 	bl	8001998 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000c70:	f000 f882 	bl	8000d78 <xTaskResumeAll>
 8000c74:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d107      	bne.n	8000c8c <xTaskDelayUntil+0x90>
        {
            portYIELD_WITHIN_API();
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <xTaskDelayUntil+0xa0>)
 8000c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000c8c:	697b      	ldr	r3, [r7, #20]
    }
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000100 	.word	0x20000100
 8000c9c:	e000ed04 	.word	0xe000ed04

08000ca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d008      	beq.n	8000cc4 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8000cb2:	f000 f853 	bl	8000d5c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 fe6d 	bl	8001998 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000cbe:	f000 f85b 	bl	8000d78 <xTaskResumeAll>
 8000cc2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d107      	bne.n	8000cda <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <vTaskDelay+0x44>)
 8000ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000ed04 	.word	0xe000ed04

08000ce8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <vTaskStartScheduler+0x58>)
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	4912      	ldr	r1, [pc, #72]	; (8000d44 <vTaskStartScheduler+0x5c>)
 8000cfc:	4812      	ldr	r0, [pc, #72]	; (8000d48 <vTaskStartScheduler+0x60>)
 8000cfe:	f7ff fe20 	bl	8000942 <xTaskCreate>
 8000d02:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d114      	bne.n	8000d34 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d0a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000d0e:	f383 8811 	msr	BASEPRI, r3
 8000d12:	f3bf 8f6f 	isb	sy
 8000d16:	f3bf 8f4f 	dsb	sy
 8000d1a:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <vTaskStartScheduler+0x64>)
 8000d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d22:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <vTaskStartScheduler+0x68>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <vTaskStartScheduler+0x6c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000d30:	f000 ff1c 	bl	8001b6c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <vTaskStartScheduler+0x70>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000120 	.word	0x20000120
 8000d44:	08003010 	.word	0x08003010
 8000d48:	080014a9 	.word	0x080014a9
 8000d4c:	2000011c 	.word	0x2000011c
 8000d50:	20000108 	.word	0x20000108
 8000d54:	20000100 	.word	0x20000100
 8000d58:	20000000 	.word	0x20000000

08000d5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <vTaskSuspendAll+0x18>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <vTaskSuspendAll+0x18>)
 8000d68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000124 	.word	0x20000124

08000d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000d86:	f000 ff11 	bl	8001bac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000d8a:	4b68      	ldr	r3, [pc, #416]	; (8000f2c <xTaskResumeAll+0x1b4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a66      	ldr	r2, [pc, #408]	; (8000f2c <xTaskResumeAll+0x1b4>)
 8000d92:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d94:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <xTaskResumeAll+0x1b4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f040 80c0 	bne.w	8000f1e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000d9e:	4b64      	ldr	r3, [pc, #400]	; (8000f30 <xTaskResumeAll+0x1b8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80bb 	beq.w	8000f1e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000da8:	e08a      	b.n	8000ec0 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000daa:	4b62      	ldr	r3, [pc, #392]	; (8000f34 <xTaskResumeAll+0x1bc>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	6a12      	ldr	r2, [r2, #32]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	69d2      	ldr	r2, [r2, #28]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d103      	bne.n	8000de0 <xTaskResumeAll+0x68>
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	6a1a      	ldr	r2, [r3, #32]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	68d2      	ldr	r2, [r2, #12]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	6892      	ldr	r2, [r2, #8]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3304      	adds	r3, #4
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d103      	bne.n	8000e1e <xTaskResumeAll+0xa6>
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	1e5a      	subs	r2, r3, #1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	2201      	movs	r2, #1
 8000e34:	409a      	lsls	r2, r3
 8000e36:	4b40      	ldr	r3, [pc, #256]	; (8000f38 <xTaskResumeAll+0x1c0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	4a3e      	ldr	r2, [pc, #248]	; (8000f38 <xTaskResumeAll+0x1c0>)
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e44:	493d      	ldr	r1, [pc, #244]	; (8000f3c <xTaskResumeAll+0x1c4>)
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	3304      	adds	r3, #4
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	3204      	adds	r2, #4
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	1d1a      	adds	r2, r3, #4
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <xTaskResumeAll+0x1c4>)
 8000e84:	441a      	add	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8e:	492b      	ldr	r1, [pc, #172]	; (8000f3c <xTaskResumeAll+0x1c4>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	1c59      	adds	r1, r3, #1
 8000e9e:	4827      	ldr	r0, [pc, #156]	; (8000f3c <xTaskResumeAll+0x1c4>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4403      	add	r3, r0
 8000eaa:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <xTaskResumeAll+0x1c8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d302      	bcc.n	8000ec0 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000eba:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <xTaskResumeAll+0x1cc>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <xTaskResumeAll+0x1bc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f47f af70 	bne.w	8000daa <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000ed0:	f000 fb7e 	bl	80015d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <xTaskResumeAll+0x1d0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d010      	beq.n	8000f02 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000ee0:	f000 f844 	bl	8000f6c <xTaskIncrementTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <xTaskResumeAll+0x1cc>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f1      	bne.n	8000ee0 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <xTaskResumeAll+0x1d0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <xTaskResumeAll+0x1cc>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d009      	beq.n	8000f1e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <xTaskResumeAll+0x1d4>)
 8000f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	f3bf 8f4f 	dsb	sy
 8000f1a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000f1e:	f000 fe5d 	bl	8001bdc <vPortExitCritical>

    return xAlreadyYielded;
 8000f22:	693b      	ldr	r3, [r7, #16]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000124 	.word	0x20000124
 8000f30:	200000fc 	.word	0x200000fc
 8000f34:	200000bc 	.word	0x200000bc
 8000f38:	20000104 	.word	0x20000104
 8000f3c:	20000028 	.word	0x20000028
 8000f40:	20000024 	.word	0x20000024
 8000f44:	20000110 	.word	0x20000110
 8000f48:	2000010c 	.word	0x2000010c
 8000f4c:	e000ed04 	.word	0xe000ed04

08000f50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <xTaskGetTickCount+0x18>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000100 	.word	0x20000100

08000f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f76:	4b79      	ldr	r3, [pc, #484]	; (800115c <xTaskIncrementTick+0x1f0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 80e2 	bne.w	8001144 <xTaskIncrementTick+0x1d8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000f80:	4b77      	ldr	r3, [pc, #476]	; (8001160 <xTaskIncrementTick+0x1f4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000f88:	4a75      	ldr	r2, [pc, #468]	; (8001160 <xTaskIncrementTick+0x1f4>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d110      	bne.n	8000fb6 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000f94:	4b73      	ldr	r3, [pc, #460]	; (8001164 <xTaskIncrementTick+0x1f8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	4b73      	ldr	r3, [pc, #460]	; (8001168 <xTaskIncrementTick+0x1fc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a71      	ldr	r2, [pc, #452]	; (8001164 <xTaskIncrementTick+0x1f8>)
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4a71      	ldr	r2, [pc, #452]	; (8001168 <xTaskIncrementTick+0x1fc>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b70      	ldr	r3, [pc, #448]	; (800116c <xTaskIncrementTick+0x200>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a6f      	ldr	r2, [pc, #444]	; (800116c <xTaskIncrementTick+0x200>)
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	f000 fb0d 	bl	80015d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000fb6:	4b6e      	ldr	r3, [pc, #440]	; (8001170 <xTaskIncrementTick+0x204>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f0c0 80a6 	bcc.w	800110e <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fc2:	4b68      	ldr	r3, [pc, #416]	; (8001164 <xTaskIncrementTick+0x1f8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fcc:	4b68      	ldr	r3, [pc, #416]	; (8001170 <xTaskIncrementTick+0x204>)
 8000fce:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd2:	601a      	str	r2, [r3, #0]
                    break;
 8000fd4:	e09b      	b.n	800110e <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fd6:	4b63      	ldr	r3, [pc, #396]	; (8001164 <xTaskIncrementTick+0x1f8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d203      	bcs.n	8000ff6 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000fee:	4a60      	ldr	r2, [pc, #384]	; (8001170 <xTaskIncrementTick+0x204>)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000ff4:	e08b      	b.n	800110e <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68d2      	ldr	r2, [r2, #12]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	6892      	ldr	r2, [r2, #8]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	3304      	adds	r3, #4
 8001018:	429a      	cmp	r2, r3
 800101a:	d103      	bne.n	8001024 <xTaskIncrementTick+0xb8>
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	2b00      	cmp	r3, #0
 800103a:	d01e      	beq.n	800107a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	6a12      	ldr	r2, [r2, #32]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	69d2      	ldr	r2, [r2, #28]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	3318      	adds	r3, #24
 800105e:	429a      	cmp	r2, r3
 8001060:	d103      	bne.n	800106a <xTaskIncrementTick+0xfe>
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6a1a      	ldr	r2, [r3, #32]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2200      	movs	r2, #0
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	2201      	movs	r2, #1
 8001080:	409a      	lsls	r2, r3
 8001082:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <xTaskIncrementTick+0x208>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4313      	orrs	r3, r2
 8001088:	4a3a      	ldr	r2, [pc, #232]	; (8001174 <xTaskIncrementTick+0x208>)
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001090:	4939      	ldr	r1, [pc, #228]	; (8001178 <xTaskIncrementTick+0x20c>)
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	3304      	adds	r3, #4
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	3204      	adds	r2, #4
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1d1a      	adds	r2, r3, #4
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <xTaskIncrementTick+0x20c>)
 80010d0:	441a      	add	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010da:	4927      	ldr	r1, [pc, #156]	; (8001178 <xTaskIncrementTick+0x20c>)
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	1c59      	adds	r1, r3, #1
 80010ea:	4823      	ldr	r0, [pc, #140]	; (8001178 <xTaskIncrementTick+0x20c>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4403      	add	r3, r0
 80010f6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <xTaskIncrementTick+0x210>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	429a      	cmp	r2, r3
 8001104:	f4ff af5d 	bcc.w	8000fc2 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001108:	2301      	movs	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800110c:	e759      	b.n	8000fc2 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <xTaskIncrementTick+0x210>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001114:	4918      	ldr	r1, [pc, #96]	; (8001178 <xTaskIncrementTick+0x20c>)
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d901      	bls.n	800112a <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]

        #if ( configUSE_TICK_HOOK == 1 )
            {
                /* Guard against the tick hook being called when the pended tick
                 * count is being unwound (when the scheduler is being unlocked). */
                if( xPendedTicks == ( TickType_t ) 0 )
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <xTaskIncrementTick+0x214>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <xTaskIncrementTick+0x1ca>
                {
                    vApplicationTickHook();
 8001132:	f001 feed 	bl	8002f10 <vApplicationTickHook>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <xTaskIncrementTick+0x218>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 800113e:	2301      	movs	r3, #1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e006      	b.n	8001152 <xTaskIncrementTick+0x1e6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <xTaskIncrementTick+0x214>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <xTaskIncrementTick+0x214>)
 800114c:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
            {
                vApplicationTickHook();
 800114e:	f001 fedf 	bl	8002f10 <vApplicationTickHook>
            }
        #endif
    }

    return xSwitchRequired;
 8001152:	69fb      	ldr	r3, [r7, #28]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000124 	.word	0x20000124
 8001160:	20000100 	.word	0x20000100
 8001164:	200000b4 	.word	0x200000b4
 8001168:	200000b8 	.word	0x200000b8
 800116c:	20000114 	.word	0x20000114
 8001170:	2000011c 	.word	0x2000011c
 8001174:	20000104 	.word	0x20000104
 8001178:	20000028 	.word	0x20000028
 800117c:	20000024 	.word	0x20000024
 8001180:	2000010c 	.word	0x2000010c
 8001184:	20000110 	.word	0x20000110

08001188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <vTaskSwitchContext+0x78>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <vTaskSwitchContext+0x7c>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800119c:	e02a      	b.n	80011f4 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <vTaskSwitchContext+0x7c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <vTaskSwitchContext+0x80>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	f1c3 031f 	rsb	r3, r3, #31
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <vTaskSwitchContext+0x84>)
 80011c6:	4413      	add	r3, r2
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3308      	adds	r3, #8
 80011dc:	429a      	cmp	r2, r3
 80011de:	d104      	bne.n	80011ea <vTaskSwitchContext+0x62>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <vTaskSwitchContext+0x88>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000124 	.word	0x20000124
 8001204:	20000110 	.word	0x20000110
 8001208:	20000104 	.word	0x20000104
 800120c:	20000028 	.word	0x20000028
 8001210:	20000024 	.word	0x20000024

08001214 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <vTaskPlaceOnEventList+0x28>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3318      	adds	r3, #24
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7fe ffd5 	bl	80001d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800122c:	2101      	movs	r1, #1
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f000 fbb2 	bl	8001998 <prvAddCurrentTaskToDelayedList>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000024 	.word	0x20000024

08001240 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	6a12      	ldr	r2, [r2, #32]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	69d2      	ldr	r2, [r2, #28]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	3318      	adds	r3, #24
 8001272:	429a      	cmp	r2, r3
 8001274:	d103      	bne.n	800127e <xTaskRemoveFromEventList+0x3e>
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6a1a      	ldr	r2, [r3, #32]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800128e:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <xTaskRemoveFromEventList+0x178>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d15e      	bne.n	8001354 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	68d2      	ldr	r2, [r2, #12]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	6892      	ldr	r2, [r2, #8]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	3304      	adds	r3, #4
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d103      	bne.n	80012c4 <xTaskRemoveFromEventList+0x84>
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	2201      	movs	r2, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	4b37      	ldr	r3, [pc, #220]	; (80013bc <xTaskRemoveFromEventList+0x17c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	4a36      	ldr	r2, [pc, #216]	; (80013bc <xTaskRemoveFromEventList+0x17c>)
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ea:	4935      	ldr	r1, [pc, #212]	; (80013c0 <xTaskRemoveFromEventList+0x180>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	3304      	adds	r3, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	3204      	adds	r2, #4
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	1d1a      	adds	r2, r3, #4
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <xTaskRemoveFromEventList+0x180>)
 800132a:	441a      	add	r2, r3
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001334:	4922      	ldr	r1, [pc, #136]	; (80013c0 <xTaskRemoveFromEventList+0x180>)
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	1c59      	adds	r1, r3, #1
 8001344:	481e      	ldr	r0, [pc, #120]	; (80013c0 <xTaskRemoveFromEventList+0x180>)
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4403      	add	r3, r0
 8001350:	6019      	str	r1, [r3, #0]
 8001352:	e01b      	b.n	800138c <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <xTaskRemoveFromEventList+0x184>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	61da      	str	r2, [r3, #28]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	621a      	str	r2, [r3, #32]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	3218      	adds	r2, #24
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	f103 0218 	add.w	r2, r3, #24
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <xTaskRemoveFromEventList+0x184>)
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <xTaskRemoveFromEventList+0x184>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <xTaskRemoveFromEventList+0x184>)
 800138a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <xTaskRemoveFromEventList+0x188>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	429a      	cmp	r2, r3
 8001398:	d905      	bls.n	80013a6 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800139a:	2301      	movs	r3, #1
 800139c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <xTaskRemoveFromEventList+0x18c>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e001      	b.n	80013aa <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80013aa:	69fb      	ldr	r3, [r7, #28]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3724      	adds	r7, #36	; 0x24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000124 	.word	0x20000124
 80013bc:	20000104 	.word	0x20000104
 80013c0:	20000028 	.word	0x20000028
 80013c4:	200000bc 	.word	0x200000bc
 80013c8:	20000024 	.word	0x20000024
 80013cc:	20000110 	.word	0x20000110

080013d0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <vTaskInternalSetTimeOutState+0x24>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <vTaskInternalSetTimeOutState+0x28>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	605a      	str	r2, [r3, #4]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000114 	.word	0x20000114
 80013f8:	20000100 	.word	0x20000100

080013fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8001406:	f000 fbd1 	bl	8001bac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <xTaskCheckForTimeOut+0x8c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001422:	d102      	bne.n	800142a <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e026      	b.n	8001478 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <xTaskCheckForTimeOut+0x90>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00a      	beq.n	800144c <xTaskCheckForTimeOut+0x50>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d305      	bcc.n	800144c <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001440:	2301      	movs	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e015      	b.n	8001478 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	429a      	cmp	r2, r3
 8001454:	d20b      	bcs.n	800146e <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1ad2      	subs	r2, r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffb4 	bl	80013d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e004      	b.n	8001478 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001478:	f000 fbb0 	bl	8001bdc <vPortExitCritical>

    return xReturn;
 800147c:	697b      	ldr	r3, [r7, #20]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000100 	.word	0x20000100
 800148c:	20000114 	.word	0x20000114

08001490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <vTaskMissedYield+0x14>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000110 	.word	0x20000110

080014a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80014b0:	f000 f852 	bl	8001558 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <prvIdleTask+0x28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d9f9      	bls.n	80014b0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <prvIdleTask+0x2c>)
 80014be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f3bf 8f4f 	dsb	sy
 80014c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80014cc:	e7f0      	b.n	80014b0 <prvIdleTask+0x8>
 80014ce:	bf00      	nop
 80014d0:	20000028 	.word	0x20000028
 80014d4:	e000ed04 	.word	0xe000ed04

080014d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	e00c      	b.n	80014fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <prvInitialiseTaskLists+0x60>)
 80014f0:	4413      	add	r3, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe fe44 	bl	8000180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3301      	adds	r3, #1
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d9ef      	bls.n	80014e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <prvInitialiseTaskLists+0x64>)
 8001506:	f7fe fe3b 	bl	8000180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <prvInitialiseTaskLists+0x68>)
 800150c:	f7fe fe38 	bl	8000180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <prvInitialiseTaskLists+0x6c>)
 8001512:	f7fe fe35 	bl	8000180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001516:	480c      	ldr	r0, [pc, #48]	; (8001548 <prvInitialiseTaskLists+0x70>)
 8001518:	f7fe fe32 	bl	8000180 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <prvInitialiseTaskLists+0x74>)
 800151e:	f7fe fe2f 	bl	8000180 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <prvInitialiseTaskLists+0x78>)
 8001524:	4a05      	ldr	r2, [pc, #20]	; (800153c <prvInitialiseTaskLists+0x64>)
 8001526:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <prvInitialiseTaskLists+0x7c>)
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <prvInitialiseTaskLists+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000028 	.word	0x20000028
 800153c:	2000008c 	.word	0x2000008c
 8001540:	200000a0 	.word	0x200000a0
 8001544:	200000bc 	.word	0x200000bc
 8001548:	200000d0 	.word	0x200000d0
 800154c:	200000e8 	.word	0x200000e8
 8001550:	200000b4 	.word	0x200000b4
 8001554:	200000b8 	.word	0x200000b8

08001558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800155e:	e019      	b.n	8001594 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001560:	f000 fb24 	bl	8001bac <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <prvCheckTasksWaitingTermination+0x4c>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3304      	adds	r3, #4
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe fe68 	bl	8000246 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <prvCheckTasksWaitingTermination+0x50>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3b01      	subs	r3, #1
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <prvCheckTasksWaitingTermination+0x50>)
 800157e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <prvCheckTasksWaitingTermination+0x54>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <prvCheckTasksWaitingTermination+0x54>)
 8001588:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800158a:	f000 fb27 	bl	8001bdc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f80e 	bl	80015b0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <prvCheckTasksWaitingTermination+0x54>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e1      	bne.n	8001560 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200000d0 	.word	0x200000d0
 80015a8:	200000fc 	.word	0x200000fc
 80015ac:	200000e4 	.word	0x200000e4

080015b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fc33 	bl	8001e28 <vPortFree>
                vPortFree( pxTCB );
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fc30 	bl	8001e28 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <prvResetNextTaskUnblockTime+0x2c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d104      	bne.n	80015e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <prvResetNextTaskUnblockTime+0x30>)
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80015e6:	e005      	b.n	80015f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <prvResetNextTaskUnblockTime+0x2c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <prvResetNextTaskUnblockTime+0x30>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	200000b4 	.word	0x200000b4
 8001600:	2000011c 	.word	0x2000011c

08001604 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8087 	beq.w	800172a <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001620:	4b44      	ldr	r3, [pc, #272]	; (8001734 <xTaskPriorityInherit+0x130>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	429a      	cmp	r2, r3
 8001628:	d276      	bcs.n	8001718 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db06      	blt.n	8001640 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <xTaskPriorityInherit+0x130>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	f1c3 0205 	rsb	r2, r3, #5
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6959      	ldr	r1, [r3, #20]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4a39      	ldr	r2, [pc, #228]	; (8001738 <xTaskPriorityInherit+0x134>)
 8001652:	4413      	add	r3, r2
 8001654:	4299      	cmp	r1, r3
 8001656:	d157      	bne.n	8001708 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	3304      	adds	r3, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fdf2 	bl	8000246 <uxListRemove>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10a      	bne.n	800167e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2201      	movs	r2, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <xTaskPriorityInherit+0x138>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4013      	ands	r3, r2
 800167a:	4a30      	ldr	r2, [pc, #192]	; (800173c <xTaskPriorityInherit+0x138>)
 800167c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <xTaskPriorityInherit+0x130>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	2201      	movs	r2, #1
 800168e:	409a      	lsls	r2, r3
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <xTaskPriorityInherit+0x138>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <xTaskPriorityInherit+0x138>)
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169e:	4926      	ldr	r1, [pc, #152]	; (8001738 <xTaskPriorityInherit+0x134>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3304      	adds	r3, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	3204      	adds	r2, #4
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1d1a      	adds	r2, r3, #4
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4a16      	ldr	r2, [pc, #88]	; (8001738 <xTaskPriorityInherit+0x134>)
 80016de:	441a      	add	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	4913      	ldr	r1, [pc, #76]	; (8001738 <xTaskPriorityInherit+0x134>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	1c59      	adds	r1, r3, #1
 80016f8:	480f      	ldr	r0, [pc, #60]	; (8001738 <xTaskPriorityInherit+0x134>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4403      	add	r3, r0
 8001704:	6019      	str	r1, [r3, #0]
 8001706:	e004      	b.n	8001712 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <xTaskPriorityInherit+0x130>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e008      	b.n	800172a <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <xTaskPriorityInherit+0x130>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	429a      	cmp	r2, r3
 8001724:	d201      	bcs.n	800172a <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001726:	2301      	movs	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800172a:	697b      	ldr	r3, [r7, #20]
    }
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000024 	.word	0x20000024
 8001738:	20000028 	.word	0x20000028
 800173c:	20000104 	.word	0x20000104

08001740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d06c      	beq.n	8001830 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175a:	1e5a      	subs	r2, r3, #1
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	429a      	cmp	r2, r3
 800176a:	d061      	beq.n	8001830 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001770:	2b00      	cmp	r3, #0
 8001772:	d15d      	bne.n	8001830 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	3304      	adds	r3, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd64 	bl	8000246 <uxListRemove>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10a      	bne.n	800179a <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2201      	movs	r2, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <xTaskPriorityDisinherit+0xfc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4013      	ands	r3, r2
 8001796:	4a29      	ldr	r2, [pc, #164]	; (800183c <xTaskPriorityDisinherit+0xfc>)
 8001798:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	f1c3 0205 	rsb	r2, r3, #5
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	2201      	movs	r2, #1
 80017b4:	409a      	lsls	r2, r3
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <xTaskPriorityDisinherit+0xfc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	4a1f      	ldr	r2, [pc, #124]	; (800183c <xTaskPriorityDisinherit+0xfc>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	491e      	ldr	r1, [pc, #120]	; (8001840 <xTaskPriorityDisinherit+0x100>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3304      	adds	r3, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	3204      	adds	r2, #4
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1d1a      	adds	r2, r3, #4
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <xTaskPriorityDisinherit+0x100>)
 8001804:	441a      	add	r2, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180e:	490c      	ldr	r1, [pc, #48]	; (8001840 <xTaskPriorityDisinherit+0x100>)
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	1c59      	adds	r1, r3, #1
 800181e:	4808      	ldr	r0, [pc, #32]	; (8001840 <xTaskPriorityDisinherit+0x100>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4403      	add	r3, r0
 800182a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800182c:	2301      	movs	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001830:	697b      	ldr	r3, [r7, #20]
    }
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000104 	.word	0x20000104
 8001840:	20000028 	.word	0x20000028

08001844 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001852:	2301      	movs	r3, #1
 8001854:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8081 	beq.w	8001960 <vTaskPriorityDisinheritAfterTimeout+0x11c>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d902      	bls.n	800186e <vTaskPriorityDisinheritAfterTimeout+0x2a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	e002      	b.n	8001874 <vTaskPriorityDisinheritAfterTimeout+0x30>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	429a      	cmp	r2, r3
 800187c:	d070      	beq.n	8001960 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	d16b      	bne.n	8001960 <vTaskPriorityDisinheritAfterTimeout+0x11c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db04      	blt.n	80018a6 <vTaskPriorityDisinheritAfterTimeout+0x62>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0205 	rsb	r2, r3, #5
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	6959      	ldr	r1, [r3, #20]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80018b6:	4413      	add	r3, r2
 80018b8:	4299      	cmp	r1, r3
 80018ba:	d151      	bne.n	8001960 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	3304      	adds	r3, #4
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fcc0 	bl	8000246 <uxListRemove>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	2201      	movs	r2, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4013      	ands	r3, r2
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80018e0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	2201      	movs	r2, #1
 80018e8:	409a      	lsls	r2, r3
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	4a1e      	ldr	r2, [pc, #120]	; (800196c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f8:	491b      	ldr	r1, [pc, #108]	; (8001968 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3304      	adds	r3, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	3204      	adds	r2, #4
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	1d1a      	adds	r2, r3, #4
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001938:	441a      	add	r2, r3
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001942:	4909      	ldr	r1, [pc, #36]	; (8001968 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	1c59      	adds	r1, r3, #1
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4403      	add	r3, r0
 800195e:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000028 	.word	0x20000028
 800196c:	20000104 	.word	0x20000104

08001970 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <pvTaskIncrementMutexHeldCount+0x24>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <pvTaskIncrementMutexHeldCount+0x24>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001982:	3201      	adds	r2, #1
 8001984:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8001986:	4b03      	ldr	r3, [pc, #12]	; (8001994 <pvTaskIncrementMutexHeldCount+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
    }
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000024 	.word	0x20000024

08001998 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80019a2:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <prvAddCurrentTaskToDelayedList+0xe4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3304      	adds	r3, #4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc49 	bl	8000246 <uxListRemove>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10b      	bne.n	80019d2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	2201      	movs	r2, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <prvAddCurrentTaskToDelayedList+0xec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4013      	ands	r3, r2
 80019ce:	4a2d      	ldr	r2, [pc, #180]	; (8001a84 <prvAddCurrentTaskToDelayedList+0xec>)
 80019d0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d124      	bne.n	8001a24 <prvAddCurrentTaskToDelayedList+0x8c>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d021      	beq.n	8001a24 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	6892      	ldr	r2, [r2, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	3204      	adds	r2, #4
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	1d1a      	adds	r2, r3, #4
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a14:	615a      	str	r2, [r3, #20]
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001a22:	e026      	b.n	8001a72 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d209      	bcs.n	8001a50 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3304      	adds	r3, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7fe fbc4 	bl	80001d6 <vListInsert>
}
 8001a4e:	e010      	b.n	8001a72 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	f7fe fbba 	bl	80001d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d202      	bcs.n	8001a72 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6013      	str	r3, [r2, #0]
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000100 	.word	0x20000100
 8001a80:	20000024 	.word	0x20000024
 8001a84:	20000104 	.word	0x20000104
 8001a88:	200000e8 	.word	0x200000e8
 8001a8c:	200000b8 	.word	0x200000b8
 8001a90:	200000b4 	.word	0x200000b4
 8001a94:	2000011c 	.word	0x2000011c

08001a98 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ab0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3b04      	subs	r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f023 0201 	bic.w	r2, r3, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3b04      	subs	r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3b14      	subs	r3, #20
 8001ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3b20      	subs	r3, #32
 8001ade:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001af6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001afa:	f383 8811 	msr	BASEPRI, r3
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001b08:	bf00      	nop
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0fc      	beq.n	8001b0a <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	0000      	movs	r0, r0
 8001b1c:	0000      	movs	r0, r0
	...

08001b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <pxCurrentTCBConst2>)
 8001b22:	6819      	ldr	r1, [r3, #0]
 8001b24:	6808      	ldr	r0, [r1, #0]
 8001b26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b2a:	f380 8809 	msr	PSP, r0
 8001b2e:	f3bf 8f6f 	isb	sy
 8001b32:	f04f 0000 	mov.w	r0, #0
 8001b36:	f380 8811 	msr	BASEPRI, r0
 8001b3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001b3e:	4770      	bx	lr

08001b40 <pxCurrentTCBConst2>:
 8001b40:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop

08001b48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001b48:	4806      	ldr	r0, [pc, #24]	; (8001b64 <prvPortStartFirstTask+0x1c>)
 8001b4a:	6800      	ldr	r0, [r0, #0]
 8001b4c:	6800      	ldr	r0, [r0, #0]
 8001b4e:	f380 8808 	msr	MSP, r0
 8001b52:	b662      	cpsie	i
 8001b54:	b661      	cpsie	f
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	df00      	svc	0
 8001b60:	bf00      	nop
 8001b62:	0000      	.short	0x0000
 8001b64:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop

08001b6c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <xPortStartScheduler+0x38>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <xPortStartScheduler+0x38>)
 8001b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <xPortStartScheduler+0x38>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <xPortStartScheduler+0x38>)
 8001b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001b88:	f000 f886 	bl	8001c98 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <xPortStartScheduler+0x3c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001b92:	f7ff ffd9 	bl	8001b48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001b96:	f7ff faf7 	bl	8001188 <vTaskSwitchContext>
    prvTaskExitError();
 8001b9a:	f7ff ffa7 	bl	8001aec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	e000ed20 	.word	0xe000ed20
 8001ba8:	20000004 	.word	0x20000004

08001bac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001bb6:	f383 8811 	msr	BASEPRI, r3
 8001bba:	f3bf 8f6f 	isb	sy
 8001bbe:	f3bf 8f4f 	dsb	sy
 8001bc2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <vPortEnterCritical+0x2c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <vPortEnterCritical+0x2c>)
 8001bcc:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000004 	.word	0x20000004

08001bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <vPortExitCritical+0x2c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <vPortExitCritical+0x2c>)
 8001bea:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <vPortExitCritical+0x2c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <vPortExitCritical+0x22>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	00000000 	.word	0x00000000

08001c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001c10:	f3ef 8009 	mrs	r0, PSP
 8001c14:	f3bf 8f6f 	isb	sy
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <pxCurrentTCBConst>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c20:	6010      	str	r0, [r2, #0]
 8001c22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001c26:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001c2a:	f380 8811 	msr	BASEPRI, r0
 8001c2e:	f7ff faab 	bl	8001188 <vTaskSwitchContext>
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f380 8811 	msr	BASEPRI, r0
 8001c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	6808      	ldr	r0, [r1, #0]
 8001c42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c46:	f380 8809 	msr	PSP, r0
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	4770      	bx	lr

08001c50 <pxCurrentTCBConst>:
 8001c50:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop

08001c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
        __asm volatile
 8001c5e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c62:	f383 8811 	msr	BASEPRI, r3
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	f3bf 8f4f 	dsb	sy
 8001c6e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c70:	f7ff f97c 	bl	8000f6c <xTaskIncrementTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SysTick_Handler+0x3c>)
 8001c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	e000ed04 	.word	0xe000ed04

08001c98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <vPortSetupTimerInterrupt+0x24>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <vPortSetupTimerInterrupt+0x28>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <vPortSetupTimerInterrupt+0x2c>)
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <vPortSetupTimerInterrupt+0x30>)
 8001cac:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001cae:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <vPortSetupTimerInterrupt+0x24>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	e000e010 	.word	0xe000e010
 8001cc0:	e000e018 	.word	0xe000e018
 8001cc4:	e000e014 	.word	0xe000e014
 8001cc8:	0001193f 	.word	0x0001193f

08001ccc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8001cd8:	f7ff f840 	bl	8000d5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001cdc:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <pvPortMalloc+0x144>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001ce4:	f000 f8e0 	bl	8001ea8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ce8:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <pvPortMalloc+0x148>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8086 	bne.w	8001e02 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01e      	beq.n	8001d3a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d218      	bcs.n	8001d3a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8001d08:	2208      	movs	r2, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d011      	beq.n	8001d3e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f023 0307 	bic.w	r3, r3, #7
 8001d20:	3308      	adds	r3, #8
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d205      	bcs.n	8001d34 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f023 0307 	bic.w	r3, r3, #7
 8001d2e:	3308      	adds	r3, #8
 8001d30:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d32:	e004      	b.n	8001d3e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d38:	e001      	b.n	8001d3e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05e      	beq.n	8001e02 <pvPortMalloc+0x136>
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <pvPortMalloc+0x14c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d859      	bhi.n	8001e02 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <pvPortMalloc+0x150>)
 8001d50:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8001d52:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <pvPortMalloc+0x150>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d58:	e004      	b.n	8001d64 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d903      	bls.n	8001d76 <pvPortMalloc+0xaa>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f1      	bne.n	8001d5a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <pvPortMalloc+0x144>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d040      	beq.n	8001e02 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d90f      	bls.n	8001dc2 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad2      	subs	r2, r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001dbc:	68b8      	ldr	r0, [r7, #8]
 8001dbe:	f000 f8d5 	bl	8001f6c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <pvPortMalloc+0x14c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <pvPortMalloc+0x14c>)
 8001dce:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <pvPortMalloc+0x14c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <pvPortMalloc+0x154>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d203      	bcs.n	8001de4 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <pvPortMalloc+0x14c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <pvPortMalloc+0x154>)
 8001de2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <pvPortMalloc+0x148>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <pvPortMalloc+0x158>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <pvPortMalloc+0x158>)
 8001e00:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001e02:	f7fe ffb9 	bl	8000d78 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20002130 	.word	0x20002130
 8001e14:	20002144 	.word	0x20002144
 8001e18:	20002134 	.word	0x20002134
 8001e1c:	20002128 	.word	0x20002128
 8001e20:	20002138 	.word	0x20002138
 8001e24:	2000213c 	.word	0x2000213c

08001e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d02c      	beq.n	8001e94 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	425b      	negs	r3, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <vPortFree+0x74>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01e      	beq.n	8001e94 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11a      	bne.n	8001e94 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <vPortFree+0x74>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	401a      	ands	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001e6e:	f7fe ff75 	bl	8000d5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <vPortFree+0x78>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <vPortFree+0x78>)
 8001e7e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e80:	68b8      	ldr	r0, [r7, #8]
 8001e82:	f000 f873 	bl	8001f6c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <vPortFree+0x7c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <vPortFree+0x7c>)
 8001e8e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001e90:	f7fe ff72 	bl	8000d78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20002144 	.word	0x20002144
 8001ea0:	20002134 	.word	0x20002134
 8001ea4:	20002140 	.word	0x20002140

08001ea8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <prvHeapInit+0xac>)
 8001eb6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3307      	adds	r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0307 	bic.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <prvHeapInit+0xac>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <prvHeapInit+0xb0>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <prvHeapInit+0xb0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0307 	bic.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <prvHeapInit+0xb4>)
 8001f08:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <prvHeapInit+0xb4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <prvHeapInit+0xb4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <prvHeapInit+0xb4>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <prvHeapInit+0xb8>)
 8001f36:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <prvHeapInit+0xbc>)
 8001f3e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <prvHeapInit+0xc0>)
 8001f42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000128 	.word	0x20000128
 8001f58:	20002128 	.word	0x20002128
 8001f5c:	20002130 	.word	0x20002130
 8001f60:	20002138 	.word	0x20002138
 8001f64:	20002134 	.word	0x20002134
 8001f68:	20002144 	.word	0x20002144

08001f6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <prvInsertBlockIntoFreeList+0xa8>)
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e002      	b.n	8001f80 <prvInsertBlockIntoFreeList+0x14>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d8f7      	bhi.n	8001f7a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	4413      	add	r3, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d108      	bne.n	8001fae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	441a      	add	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	441a      	add	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d118      	bne.n	8001ff4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <prvInsertBlockIntoFreeList+0xac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d00d      	beq.n	8001fea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	441a      	add	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e008      	b.n	8001ffc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <prvInsertBlockIntoFreeList+0xac>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e003      	b.n	8001ffc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d002      	beq.n	800200a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	20002128 	.word	0x20002128
 8002018:	20002130 	.word	0x20002130

0800201c <EXTI0_IRQHandler>:
 * ===============================================
				"ISR Function"
 * ===============================================
 */

void EXTI0_IRQHandler (void){
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	//Disable Pending register
	EXTI->PR |= 1<<0 ;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <EXTI0_IRQHandler+0x1c>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <EXTI0_IRQHandler+0x1c>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ
	GP_IRQ_CallBack[0] ();
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <EXTI0_IRQHandler+0x20>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4798      	blx	r3

	}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40010400 	.word	0x40010400
 800203c:	20002170 	.word	0x20002170

08002040 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<1) ;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <EXTI1_IRQHandler+0x1c>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <EXTI1_IRQHandler+0x1c>)
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[1]();
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <EXTI1_IRQHandler+0x20>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4798      	blx	r3

	}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40010400 	.word	0x40010400
 8002060:	20002170 	.word	0x20002170

08002064 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void){
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<2) ;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <EXTI2_IRQHandler+0x1c>)
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <EXTI2_IRQHandler+0x1c>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[2]();
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <EXTI2_IRQHandler+0x20>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4798      	blx	r3

	}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40010400 	.word	0x40010400
 8002084:	20002170 	.word	0x20002170

08002088 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void){
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<3) ;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <EXTI3_IRQHandler+0x1c>)
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <EXTI3_IRQHandler+0x1c>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[3]();
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <EXTI3_IRQHandler+0x20>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4798      	blx	r3

	}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40010400 	.word	0x40010400
 80020a8:	20002170 	.word	0x20002170

080020ac <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	//Disable Pending register
		EXTI->PR |= (1<<4) ;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <EXTI4_IRQHandler+0x1c>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <EXTI4_IRQHandler+0x1c>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6153      	str	r3, [r2, #20]
		// CALLBACK IRQ
		GP_IRQ_CallBack[4]();
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <EXTI4_IRQHandler+0x20>)
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4798      	blx	r3

	}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40010400 	.word	0x40010400
 80020cc:	20002170 	.word	0x20002170

080020d0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){ EXTI->PR |= (1<<5) ; GP_IRQ_CallBack[5](); }
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <EXTI9_5_IRQHandler+0x22>
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 80020e6:	f043 0320 	orr.w	r3, r3, #32
 80020ea:	6153      	str	r3, [r2, #20]
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <EXTI9_5_IRQHandler+0xa4>)
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6) ; GP_IRQ_CallBack[6](); }
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <EXTI9_5_IRQHandler+0x40>
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 8002104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002108:	6153      	str	r3, [r2, #20]
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <EXTI9_5_IRQHandler+0xa4>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7) ; GP_IRQ_CallBack[7](); }
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <EXTI9_5_IRQHandler+0x5e>
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	4a13      	ldr	r2, [pc, #76]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 8002122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002126:	6153      	str	r3, [r2, #20]
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <EXTI9_5_IRQHandler+0xa4>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8) ; GP_IRQ_CallBack[8](); }
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <EXTI9_5_IRQHandler+0x7c>
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6153      	str	r3, [r2, #20]
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <EXTI9_5_IRQHandler+0xa4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9) ; GP_IRQ_CallBack[9](); }
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <EXTI9_5_IRQHandler+0x9a>
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <EXTI9_5_IRQHandler+0xa0>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6153      	str	r3, [r2, #20]
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <EXTI9_5_IRQHandler+0xa4>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	4798      	blx	r3

	}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40010400 	.word	0x40010400
 8002174:	20002170 	.word	0x20002170

08002178 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){ EXTI->PR |= (1<<10) ; GP_IRQ_CallBack[10](); }
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <EXTI15_10_IRQHandler+0x22>
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	4a29      	ldr	r2, [pc, #164]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6153      	str	r3, [r2, #20]
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <EXTI15_10_IRQHandler+0xc0>)
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11) ; GP_IRQ_CallBack[11](); }
 800219a:	4b26      	ldr	r3, [pc, #152]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <EXTI15_10_IRQHandler+0x40>
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4a22      	ldr	r2, [pc, #136]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021b0:	6153      	str	r3, [r2, #20]
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <EXTI15_10_IRQHandler+0xc0>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12) ; GP_IRQ_CallBack[12](); }
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <EXTI15_10_IRQHandler+0x5e>
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ce:	6153      	str	r3, [r2, #20]
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <EXTI15_10_IRQHandler+0xc0>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13) ; GP_IRQ_CallBack[13](); }
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <EXTI15_10_IRQHandler+0x7c>
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ec:	6153      	str	r3, [r2, #20]
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <EXTI15_10_IRQHandler+0xc0>)
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14) ; GP_IRQ_CallBack[14](); }
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <EXTI15_10_IRQHandler+0x9a>
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220a:	6153      	str	r3, [r2, #20]
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <EXTI15_10_IRQHandler+0xc0>)
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15) ; GP_IRQ_CallBack[15](); }
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <EXTI15_10_IRQHandler+0xb8>
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <EXTI15_10_IRQHandler+0xbc>)
 8002224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002228:	6153      	str	r3, [r2, #20]
 800222a:	4b03      	ldr	r3, [pc, #12]	; (8002238 <EXTI15_10_IRQHandler+0xc0>)
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	4798      	blx	r3

	}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40010400 	.word	0x40010400
 8002238:	20002170 	.word	0x20002170

0800223c <Get_CRLH_Position>:
/*
 * ===============================================
 * APIs Supported by "MCAL GPIO DRIVER"
 * ===============================================
 */
uint8_t Get_CRLH_Position (uint16_t PinNumber) {
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d042      	beq.n	80022d2 <Get_CRLH_Position+0x96>
 800224c:	2b80      	cmp	r3, #128	; 0x80
 800224e:	dc11      	bgt.n	8002274 <Get_CRLH_Position+0x38>
 8002250:	2b08      	cmp	r3, #8
 8002252:	d036      	beq.n	80022c2 <Get_CRLH_Position+0x86>
 8002254:	2b08      	cmp	r3, #8
 8002256:	dc06      	bgt.n	8002266 <Get_CRLH_Position+0x2a>
 8002258:	2b02      	cmp	r3, #2
 800225a:	d02e      	beq.n	80022ba <Get_CRLH_Position+0x7e>
 800225c:	2b04      	cmp	r3, #4
 800225e:	d02e      	beq.n	80022be <Get_CRLH_Position+0x82>
 8002260:	2b01      	cmp	r3, #1
 8002262:	d028      	beq.n	80022b6 <Get_CRLH_Position+0x7a>
 8002264:	e047      	b.n	80022f6 <Get_CRLH_Position+0xba>
 8002266:	2b20      	cmp	r3, #32
 8002268:	d02f      	beq.n	80022ca <Get_CRLH_Position+0x8e>
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d02f      	beq.n	80022ce <Get_CRLH_Position+0x92>
 800226e:	2b10      	cmp	r3, #16
 8002270:	d029      	beq.n	80022c6 <Get_CRLH_Position+0x8a>
 8002272:	e040      	b.n	80022f6 <Get_CRLH_Position+0xba>
 8002274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002278:	d033      	beq.n	80022e2 <Get_CRLH_Position+0xa6>
 800227a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800227e:	dc09      	bgt.n	8002294 <Get_CRLH_Position+0x58>
 8002280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002284:	d029      	beq.n	80022da <Get_CRLH_Position+0x9e>
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	d028      	beq.n	80022de <Get_CRLH_Position+0xa2>
 800228c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002290:	d021      	beq.n	80022d6 <Get_CRLH_Position+0x9a>
 8002292:	e030      	b.n	80022f6 <Get_CRLH_Position+0xba>
 8002294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002298:	d027      	beq.n	80022ea <Get_CRLH_Position+0xae>
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229e:	dc03      	bgt.n	80022a8 <Get_CRLH_Position+0x6c>
 80022a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a4:	d01f      	beq.n	80022e6 <Get_CRLH_Position+0xaa>
 80022a6:	e026      	b.n	80022f6 <Get_CRLH_Position+0xba>
 80022a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ac:	d01f      	beq.n	80022ee <Get_CRLH_Position+0xb2>
 80022ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b2:	d01e      	beq.n	80022f2 <Get_CRLH_Position+0xb6>
 80022b4:	e01f      	b.n	80022f6 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0 :
		return 0 ;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e01e      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 80022ba:	2304      	movs	r3, #4
 80022bc:	e01c      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 80022be:	2308      	movs	r3, #8
 80022c0:	e01a      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 80022c2:	230c      	movs	r3, #12
 80022c4:	e018      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 80022c6:	2310      	movs	r3, #16
 80022c8:	e016      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 80022ca:	2314      	movs	r3, #20
 80022cc:	e014      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 80022ce:	2318      	movs	r3, #24
 80022d0:	e012      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 80022d2:	231c      	movs	r3, #28
 80022d4:	e010      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8 :
		return 0 ;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e00e      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 80022da:	2304      	movs	r3, #4
 80022dc:	e00c      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 80022de:	2308      	movs	r3, #8
 80022e0:	e00a      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 80022e2:	230c      	movs	r3, #12
 80022e4:	e008      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 80022e6:	2310      	movs	r3, #16
 80022e8:	e006      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_13:
		return 20 ;
 80022ea:	2314      	movs	r3, #20
 80022ec:	e004      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 80022ee:	2318      	movs	r3, #24
 80022f0:	e002      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 80022f2:	231c      	movs	r3, #28
 80022f4:	e000      	b.n	80022f8 <Get_CRLH_Position+0xbc>
		break ;

	}
	return 0 ;
 80022f6:	2300      	movs	r3, #0


}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <MCAL_GPIO_Init>:
 * Note					- In STM32F103C6 A , B fully included in LQFP48 Package ,
 * 									     C , D Partial included in LQFP48 Package ,
 * 						      			 E NOT included in LQFP48 Package.
 */

void MCAL_GPIO_Init(GPIO_Typedef *GPIOx ,GPIO_PinConfig_t* PinConfig ) {
 8002302:	b590      	push	{r4, r7, lr}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
	// Port Configuration register low (GPIOx_CRL) Configure PINs from 0 >>> 7
	// Port Configuration register High (GPIOx_CRH) Configure PINs from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig ->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ; // TO check pin is low(0>>>7) or high(8>>>15)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	2bff      	cmp	r3, #255	; 0xff
 800231a:	d801      	bhi.n	8002320 <MCAL_GPIO_Init+0x1e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	e001      	b.n	8002324 <MCAL_GPIO_Init+0x22>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	60bb      	str	r3, [r7, #8]

	//clear CNF , MODE
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff86 	bl	800223c <Get_CRLH_Position>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	230f      	movs	r3, #15
 8002336:	4093      	lsls	r3, r2
 8002338:	43da      	mvns	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	401a      	ands	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	601a      	str	r2, [r3, #0]

	// if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_Output_push_pull ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_Open_drain ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_Push_pull ) || (PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_Open_drain  ))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	789b      	ldrb	r3, [r3, #2]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00b      	beq.n	8002364 <MCAL_GPIO_Init+0x62>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	789b      	ldrb	r3, [r3, #2]
 8002350:	2b05      	cmp	r3, #5
 8002352:	d007      	beq.n	8002364 <MCAL_GPIO_Init+0x62>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	2b06      	cmp	r3, #6
 800235a:	d003      	beq.n	8002364 <MCAL_GPIO_Init+0x62>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	789b      	ldrb	r3, [r3, #2]
 8002360:	2b07      	cmp	r3, #7
 8002362:	d10e      	bne.n	8002382 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF , MODE
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2 ) | (PinConfig -> GPIO_Output_Speed)) & 0x0f ) ;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	789b      	ldrb	r3, [r3, #2]
 8002368:	3b04      	subs	r3, #4
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	b25a      	sxtb	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	78db      	ldrb	r3, [r3, #3]
 8002372:	b25b      	sxtb	r3, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	b25b      	sxtb	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e02c      	b.n	80023dc <MCAL_GPIO_Init+0xda>
//		(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;

	}
	// if pin is output
	else { // MODE  = 00 INPUT RESET STATE
		if((PinConfig->GPIO_MODE == GPIO_MODE_Analog ) ||(PinConfig->GPIO_MODE == GPIO_MODE_Input_Floating ) ){
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	789b      	ldrb	r3, [r3, #2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <MCAL_GPIO_Init+0x90>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	789b      	ldrb	r3, [r3, #2]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <MCAL_GPIO_Init+0xa0>
			//Set CNF , MODE
			PIN_Config = ((((PinConfig->GPIO_MODE ) << 2 ) | 0x0 ) & 0x0f ) ;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	789b      	ldrb	r3, [r3, #2]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e01c      	b.n	80023dc <MCAL_GPIO_Init+0xda>
//			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;

		}else if(PinConfig->GPIO_MODE == GPIO_MODE_Input_AF ){
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	789b      	ldrb	r3, [r3, #2]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d102      	bne.n	80023b0 <MCAL_GPIO_Init+0xae>
			//Set CNF , MODE
			PIN_Config = (((GPIO_MODE_Input_AF << 2 ) | 0x0 ) & 0x0f ) ;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e015      	b.n	80023dc <MCAL_GPIO_Init+0xda>
//			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;

		}
		else{
			PIN_Config = (((GPIO_MODE_Input_pull_up << 2 ) | 0x0 ) & 0x0f)  ;
 80023b0:	2308      	movs	r3, #8
 80023b2:	73fb      	strb	r3, [r7, #15]
//			(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;

			if(PinConfig->GPIO_MODE == GPIO_MODE_Input_pull_up){
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	789b      	ldrb	r3, [r3, #2]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d107      	bne.n	80023cc <MCAL_GPIO_Init+0xca>
		// in case Pull_down table 20 port bit configuration table PXODR 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	8812      	ldrh	r2, [r2, #0]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	e007      	b.n	80023dc <MCAL_GPIO_Init+0xda>
			}
			else{
		//  in case Pull_down  table 20 port bit configuration table PXODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	8812      	ldrh	r2, [r2, #0]
 80023d4:	43d2      	mvns	r2, r2
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]

			}

		}
	}
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 80023dc:	7bfc      	ldrb	r4, [r7, #15]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff2a 	bl	800223c <Get_CRLH_Position>
 80023e8:	4603      	mov	r3, r0
 80023ea:	fa04 f203 	lsl.w	r2, r4, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd90      	pop	{r4, r7, pc}

08002400 <MCAL_GPIO_WritePin>:
 * @param[in] 			- PinNumber ======> @REF GPIO_PIN_Define
 * @param[in]			- Value
 * @retval				- none
 * Note					- none
 */
void MCAL_GPIO_WritePin(GPIO_Typedef *GPIOx , uint16_t PinNumber , uint16_t Value  ){
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	803b      	strh	r3, [r7, #0]
	if( Value != GPIO_PIN_Reset ){
 8002410:	883b      	ldrh	r3, [r7, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <MCAL_GPIO_WritePin+0x1e>
//		GPIOx->ODR |= PinNumber ;
		// or use Register according to TRM
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	611a      	str	r2, [r3, #16]
		}
		else {
			//use Register according to TRM
			GPIOx->BRR = (uint32_t)PinNumber ;
		}
}
 800241c:	e002      	b.n	8002424 <MCAL_GPIO_WritePin+0x24>
			GPIOx->BRR = (uint32_t)PinNumber ;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <I2C1_EV_IRQHandler>:
// ******************************* ISR *******************************

//				Note :	Working on to Compete but Not Now ...

void I2C1_EV_IRQHandler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
//	temp2 = I2Cx->I2C_CR2 & (I2C_CR2_ITBUFEN) ;
//	temp3 = I2Cx->I2C_SR1 & (I2C_SR1_STOPF) ;


	//	Working on to Compete but Not Now ...
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
	...

08002460 <MCAL_RCC_Get_System_CLK_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_System_CLK_Frequency(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable
*/
	switch((RCC->CFGR >> 2) & 0b11)
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MCAL_RCC_Get_System_CLK_Frequency+0x34>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d006      	beq.n	8002480 <MCAL_RCC_Get_System_CLK_Frequency+0x20>
 8002472:	2b01      	cmp	r3, #1
 8002474:	d302      	bcc.n	800247c <MCAL_RCC_Get_System_CLK_Frequency+0x1c>
 8002476:	2b02      	cmp	r3, #2
 8002478:	d004      	beq.n	8002484 <MCAL_RCC_Get_System_CLK_Frequency+0x24>
 800247a:	e005      	b.n	8002488 <MCAL_RCC_Get_System_CLK_Frequency+0x28>
	{
	case 0:
		return HSI_RC_CLK ;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <MCAL_RCC_Get_System_CLK_Frequency+0x38>)
 800247e:	e004      	b.n	800248a <MCAL_RCC_Get_System_CLK_Frequency+0x2a>
		break ;
	case 1:
		//todo need to calculate it HSE user should specify
		return HSE_Clock ;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MCAL_RCC_Get_System_CLK_Frequency+0x3c>)
 8002482:	e002      	b.n	800248a <MCAL_RCC_Get_System_CLK_Frequency+0x2a>
		break ;
	case 2:
		//todo need to calculate , PLLCLK , PLLMUL , PLL source MUX
		return 16000000 ;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <MCAL_RCC_Get_System_CLK_Frequency+0x3c>)
 8002486:	e000      	b.n	800248a <MCAL_RCC_Get_System_CLK_Frequency+0x2a>
		break ;
	default:
		return 0 ;
 8002488:	2300      	movs	r3, #0
		break;
	}
	return 0 ;
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	007a1200 	.word	0x007a1200
 800249c:	00f42400 	.word	0x00f42400

080024a0 <MCAL_RCC_Get_HCLK_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_HCLK_Frequency(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512 */

	return (MCAL_RCC_Get_System_CLK_Frequency() >> AHB_prescaler_Table[ ( ( RCC->CFGR >> 7 )& 0b1111 )] ) ; // The First Shift is Multiplication.
 80024a4:	f7ff ffdc 	bl	8002460 <MCAL_RCC_Get_System_CLK_Frequency>
 80024a8:	4601      	mov	r1, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <MCAL_RCC_Get_HCLK_Frequency+0x20>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	09db      	lsrs	r3, r3, #7
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	4a03      	ldr	r2, [pc, #12]	; (80024c4 <MCAL_RCC_Get_HCLK_Frequency+0x24>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	fa21 f303 	lsr.w	r3, r1, r3
	//*(( RCC->CFGR >>8) & 0b1111) This Is Read Value of AHB  prescaler To Determine index On 2d Upper Array */

}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08003090 	.word	0x08003090

080024c8 <MCAL_RCC_Get_PCLK1_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_PCLK1_Frequency(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_Get_HCLK_Frequency() >> APB_prescaler_Table[ ( ( RCC->CFGR >> 8 )& 0b111 )] ) ; // The First Shift is Multiplication.
 80024cc:	f7ff ffe8 	bl	80024a0 <MCAL_RCC_Get_HCLK_Frequency>
 80024d0:	4601      	mov	r1, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <MCAL_RCC_Get_PCLK1_Frequency+0x20>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4a03      	ldr	r2, [pc, #12]	; (80024ec <MCAL_RCC_Get_PCLK1_Frequency+0x24>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	fa21 f303 	lsr.w	r3, r1, r3


}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08003088 	.word	0x08003088

080024f0 <MCAL_RCC_Get_PCLK2_Frequency>:
 *
 *
 */

uint32_t MCAL_RCC_Get_PCLK2_Frequency(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_Get_HCLK_Frequency() >> APB_prescaler_Table[ ( ( RCC->CFGR >> 11 )& 0b111 )] ) ; // The First Shift is Multiplication.
 80024f4:	f7ff ffd4 	bl	80024a0 <MCAL_RCC_Get_HCLK_Frequency>
 80024f8:	4601      	mov	r1, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <MCAL_RCC_Get_PCLK2_Frequency+0x20>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0adb      	lsrs	r3, r3, #11
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4a03      	ldr	r2, [pc, #12]	; (8002514 <MCAL_RCC_Get_PCLK2_Frequency+0x24>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	fa21 f303 	lsr.w	r3, r1, r3


}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08003088 	.word	0x08003088

08002518 <SPI1_IRQHandler>:
}


//========================================== IRQ ==========================================

void SPI1_IRQHandler(void){
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src ;

	irq_src.TXE =  ( ((SPI1->SPI_SR) & (1<<1)) >> 1) ;
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <SPI1_IRQHandler+0x54>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	085b      	lsrs	r3, r3, #1
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	793b      	ldrb	r3, [r7, #4]
 800252c:	f362 0300 	bfi	r3, r2, #0, #1
 8002530:	713b      	strb	r3, [r7, #4]
	irq_src.RXEN = ( ((SPI1->SPI_SR) & (1<<0)) >> 0) ;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <SPI1_IRQHandler+0x54>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	b2da      	uxtb	r2, r3
 800253c:	793b      	ldrb	r3, [r7, #4]
 800253e:	f362 0341 	bfi	r3, r2, #1, #1
 8002542:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ((SPI1->SPI_SR) & (1<<4)) >> 4) ;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <SPI1_IRQHandler+0x54>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	793b      	ldrb	r3, [r7, #4]
 8002552:	f362 0382 	bfi	r3, r2, #2, #1
 8002556:	713b      	strb	r3, [r7, #4]

	Global_SPI_Congig[SPI1_INDEX]->P_IRQ_CallBack(irq_src) ;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SPI1_IRQHandler+0x58>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	7938      	ldrb	r0, [r7, #4]
 8002560:	4798      	blx	r3
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40013000 	.word	0x40013000
 8002570:	20002148 	.word	0x20002148

08002574 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src ;

	irq_src.TXE =  ( ((SPI2->SPI_SR) & (1<<1)) >> 1) ;
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <SPI2_IRQHandler+0x54>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	793b      	ldrb	r3, [r7, #4]
 8002588:	f362 0300 	bfi	r3, r2, #0, #1
 800258c:	713b      	strb	r3, [r7, #4]
	irq_src.RXEN = ( ((SPI2->SPI_SR) & (1<<0)) >> 0) ;
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <SPI2_IRQHandler+0x54>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	793b      	ldrb	r3, [r7, #4]
 800259a:	f362 0341 	bfi	r3, r2, #1, #1
 800259e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ((SPI2->SPI_SR) & (1<<4)) >> 4) ;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <SPI2_IRQHandler+0x54>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	793b      	ldrb	r3, [r7, #4]
 80025ae:	f362 0382 	bfi	r3, r2, #2, #1
 80025b2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Congig[SPI2_INDEX]->P_IRQ_CallBack(irq_src) ;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <SPI2_IRQHandler+0x58>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	7938      	ldrb	r0, [r7, #4]
 80025bc:	4798      	blx	r3

}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40003800 	.word	0x40003800
 80025cc:	20002148 	.word	0x20002148

080025d0 <MCAL_UART_Init>:
 *
 *
 */

void MCAL_UART_Init(USART_Typedef* USARTx , UART_Config* UART_Config)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	uint32_t Pclk , BRR ;

	//Global_UART_Config = UART_Config ;

	// Enable The Clock for  given USART Peripheral
	if(USARTx == USART1){
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a59      	ldr	r2, [pc, #356]	; (8002744 <MCAL_UART_Init+0x174>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d109      	bne.n	80025f6 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN() ;
 80025e2:	4b59      	ldr	r3, [pc, #356]	; (8002748 <MCAL_UART_Init+0x178>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4a58      	ldr	r2, [pc, #352]	; (8002748 <MCAL_UART_Init+0x178>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ec:	6193      	str	r3, [r2, #24]
	    Global_UART_Config[0] = UART_Config ;
 80025ee:	4a57      	ldr	r2, [pc, #348]	; (800274c <MCAL_UART_Init+0x17c>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e01a      	b.n	800262c <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2){
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a55      	ldr	r2, [pc, #340]	; (8002750 <MCAL_UART_Init+0x180>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d109      	bne.n	8002612 <MCAL_UART_Init+0x42>
		RCC_USART2_CLK_EN() ;
 80025fe:	4b52      	ldr	r3, [pc, #328]	; (8002748 <MCAL_UART_Init+0x178>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a51      	ldr	r2, [pc, #324]	; (8002748 <MCAL_UART_Init+0x178>)
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	61d3      	str	r3, [r2, #28]
	    Global_UART_Config[1] = UART_Config ;
 800260a:	4a50      	ldr	r2, [pc, #320]	; (800274c <MCAL_UART_Init+0x17c>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6053      	str	r3, [r2, #4]
 8002610:	e00c      	b.n	800262c <MCAL_UART_Init+0x5c>
	}

	else if(USARTx == USART3){
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <MCAL_UART_Init+0x184>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d108      	bne.n	800262c <MCAL_UART_Init+0x5c>
		RCC_USART3_CLK_EN() ;
 800261a:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <MCAL_UART_Init+0x178>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <MCAL_UART_Init+0x178>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	61d3      	str	r3, [r2, #28]
	    Global_UART_Config[2] = UART_Config ;
 8002626:	4a49      	ldr	r2, [pc, #292]	; (800274c <MCAL_UART_Init+0x17c>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6093      	str	r3, [r2, #8]
	}
	// Enable UART Module
	//Bit 13 UE: USART enable
	USARTx->USART_CR1 |= 1<<13 ;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]

	// Enable USART TX and RX Engines according to the USART_MODE Configuration item
	// USART_CR1 Bit 3 TE: Transmitter enable , Bit 2 RE: Receiver enable
	USARTx->USART_CR1 |= UART_Config->UART_Mode ;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	8812      	ldrh	r2, [r2, #0]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60da      	str	r2, [r3, #12]

	// PAYLOAD Width
	// USARTx->USART_CR1 Bit 12 M: Word length
	USARTx->USART_CR1 |= UART_Config->Payload_length ;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	8912      	ldrh	r2, [r2, #8]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]

	// Configuration of Parity Control bit fields
	// USARTx->USART_CR1 Bit 10 PCE: Parity control enable , Bit 9 PS: Parity selection
	USARTx->USART_CR1 |= UART_Config->Parity ;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	8952      	ldrh	r2, [r2, #10]
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60da      	str	r2, [r3, #12]

	// Configuration of the number of stop bits
	// USARTx->USART_CR2 Bits 13:12 STOP: STOP bits
	USARTx->USART_CR2 |= UART_Config->Stop_Bits ;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	8992      	ldrh	r2, [r2, #12]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	611a      	str	r2, [r3, #16]

	// Configuration of USART Hardware Flow Control
	// USARTx->USART_CR3 Bit 9 CTSE: CTS enable , Bit 8 RTSE: RTS enable
	USARTx->USART_CR3 |= UART_Config->HW_Flow_Conterl ;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	89d2      	ldrh	r2, [r2, #14]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	615a      	str	r2, [r3, #20]

	// Configuration of BRR (Baudrate register)
	// PCLK1 for USART 2 , 3
	// PCLK2 for USART 1

	if( USARTx == USART1 ){
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a30      	ldr	r2, [pc, #192]	; (8002744 <MCAL_UART_Init+0x174>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d103      	bne.n	800268e <MCAL_UART_Init+0xbe>
		Pclk = MCAL_RCC_Get_PCLK2_Frequency() ;
 8002686:	f7ff ff33 	bl	80024f0 <MCAL_RCC_Get_PCLK2_Frequency>
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	e002      	b.n	8002694 <MCAL_UART_Init+0xc4>
	}
	else {
		Pclk = MCAL_RCC_Get_PCLK1_Frequency() ;
 800268e:	f7ff ff1b 	bl	80024c8 <MCAL_RCC_Get_PCLK1_Frequency>
 8002692:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(Pclk , UART_Config->BaudRate ) ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	0119      	lsls	r1, r3, #4
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c4:	2064      	movs	r0, #100	; 0x64
 80026c6:	fb00 f303 	mul.w	r3, r0, r3
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4a22      	ldr	r2, [pc, #136]	; (8002758 <MCAL_UART_Init+0x188>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	430b      	orrs	r3, r1
 80026dc:	60bb      	str	r3, [r7, #8]
	USARTx->USART_BRR = BRR ;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt
	// USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE  ){
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	7c1b      	ldrb	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d026      	beq.n	800273a <MCAL_UART_Init+0x16a>
		USARTx->USART_CR1 |= (UART_Config->IRQ_Enable) ;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	7c12      	ldrb	r2, [r2, #16]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	60da      	str	r2, [r3, #12]

		//  Enable For NVIC UARTx IRQ
		if(USARTx == USART1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <MCAL_UART_Init+0x174>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d106      	bne.n	8002710 <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_Enable() ;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <MCAL_UART_Init+0x18c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <MCAL_UART_Init+0x18c>)
 8002708:	f043 0320 	orr.w	r3, r3, #32
 800270c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_Enable() ;

	}


}
 800270e:	e014      	b.n	800273a <MCAL_UART_Init+0x16a>
		else if(USARTx == USART2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <MCAL_UART_Init+0x180>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d106      	bne.n	8002726 <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_Enable() ;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <MCAL_UART_Init+0x18c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <MCAL_UART_Init+0x18c>)
 800271e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	e009      	b.n	800273a <MCAL_UART_Init+0x16a>
		else if(USARTx == USART3)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <MCAL_UART_Init+0x184>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d105      	bne.n	800273a <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_Enable() ;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MCAL_UART_Init+0x18c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <MCAL_UART_Init+0x18c>)
 8002734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40013800 	.word	0x40013800
 8002748:	40021000 	.word	0x40021000
 800274c:	20002150 	.word	0x20002150
 8002750:	40004400 	.word	0x40004400
 8002754:	40004800 	.word	0x40004800
 8002758:	51eb851f 	.word	0x51eb851f
 800275c:	e000e104 	.word	0xe000e104

08002760 <Which_UART>:
}

/*
 * This functions is used by UART driver to get the index of the global array for the used instance
 * */
static uint8_t Which_UART(USART_Typedef* USARTx){
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <Which_UART+0x38>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d101      	bne.n	8002774 <Which_UART+0x14>
	{
		return 0;
 8002770:	2300      	movs	r3, #0
 8002772:	e00c      	b.n	800278e <Which_UART+0x2e>
	}
	else if(USARTx == USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <Which_UART+0x3c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <Which_UART+0x20>
	{
		return 1;
 800277c:	2301      	movs	r3, #1
 800277e:	e006      	b.n	800278e <Which_UART+0x2e>
	}
	else if(USARTx == USART3)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <Which_UART+0x40>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <Which_UART+0x2c>
	{
		return 3;
 8002788:	2303      	movs	r3, #3
 800278a:	e000      	b.n	800278e <Which_UART+0x2e>
	}
	return 4;		//will cause error for user when he uses wrong address for USARTx
 800278c:	2304      	movs	r3, #4
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40013800 	.word	0x40013800
 800279c:	40004400 	.word	0x40004400
 80027a0:	40004800 	.word	0x40004800

080027a4 <MCAL_UART_GPIO_Set_Pins>:
 *
 *
 */

void MCAL_UART_GPIO_Set_Pins(USART_Typedef* USARTx)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PINCFG ;
	if(USARTx == USART1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a75      	ldr	r2, [pc, #468]	; (8002984 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d14a      	bne.n	800284a <MCAL_UART_GPIO_Set_Pins+0xa6>
		// PA10 => RX
		// PA11 => CTS
		// PA12 => RTS

		// PA9 => TX
		PINCFG.GPIO_PinNumber = GPIO_PIN_9 ;
 80027b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b8:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 80027ba:	2306      	movs	r3, #6
 80027bc:	73bb      	strb	r3, [r7, #14]
		PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	4619      	mov	r1, r3
 80027c8:	486f      	ldr	r0, [pc, #444]	; (8002988 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 80027ca:	f7ff fd9a 	bl	8002302 <MCAL_GPIO_Init>

		// PA10 => RX
		PINCFG.GPIO_PinNumber = GPIO_PIN_10 ;
 80027ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d2:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Input_Floating ;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	4619      	mov	r1, r3
 80027de:	486a      	ldr	r0, [pc, #424]	; (8002988 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 80027e0:	f7ff fd8f 	bl	8002302 <MCAL_GPIO_Init>

		// PA11 => CTS
		// PA12 => RTS
		if(Global_UART_Config[0]->HW_Flow_Conterl== UART_HW_Flow_Conterl_CTS || Global_UART_Config[0]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS_CTS)
 80027e4:	4b69      	ldr	r3, [pc, #420]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	89db      	ldrh	r3, [r3, #14]
 80027ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ee:	d005      	beq.n	80027fc <MCAL_UART_GPIO_Set_Pins+0x58>
 80027f0:	4b66      	ldr	r3, [pc, #408]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	89db      	ldrh	r3, [r3, #14]
 80027f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027fa:	d10b      	bne.n	8002814 <MCAL_UART_GPIO_Set_Pins+0x70>
		{
			// PA11 => CTS
			PINCFG.GPIO_PinNumber = GPIO_PIN_11 ;
 80027fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002800:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_Input_Floating ;
 8002802:	2301      	movs	r3, #1
 8002804:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	4619      	mov	r1, r3
 800280c:	485e      	ldr	r0, [pc, #376]	; (8002988 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 800280e:	f7ff fd78 	bl	8002302 <MCAL_GPIO_Init>
 8002812:	e0b2      	b.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>

		}
		else if(Global_UART_Config[0]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS || Global_UART_Config[0]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS_CTS)
 8002814:	4b5d      	ldr	r3, [pc, #372]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	89db      	ldrh	r3, [r3, #14]
 800281a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281e:	d006      	beq.n	800282e <MCAL_UART_GPIO_Set_Pins+0x8a>
 8002820:	4b5a      	ldr	r3, [pc, #360]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	89db      	ldrh	r3, [r3, #14]
 8002826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800282a:	f040 80a6 	bne.w	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
		{
			// PA12 => RTS
			PINCFG.GPIO_PinNumber = GPIO_PIN_12 ;
 800282e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002832:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 8002834:	2306      	movs	r3, #6
 8002836:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	4619      	mov	r1, r3
 8002842:	4851      	ldr	r0, [pc, #324]	; (8002988 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8002844:	f7ff fd5d 	bl	8002302 <MCAL_GPIO_Init>
			PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
			MCAL_GPIO_Init(GPIOB, &PINCFG) ;

		}
	}
}
 8002848:	e097      	b.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
	else if(USARTx == USART2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d145      	bne.n	80028de <MCAL_UART_GPIO_Set_Pins+0x13a>
		PINCFG.GPIO_PinNumber = GPIO_PIN_2 ;
 8002852:	2304      	movs	r3, #4
 8002854:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 8002856:	2306      	movs	r3, #6
 8002858:	73bb      	strb	r3, [r7, #14]
		PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 800285e:	f107 030c 	add.w	r3, r7, #12
 8002862:	4619      	mov	r1, r3
 8002864:	4848      	ldr	r0, [pc, #288]	; (8002988 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8002866:	f7ff fd4c 	bl	8002302 <MCAL_GPIO_Init>
		PINCFG.GPIO_PinNumber = GPIO_PIN_3 ;
 800286a:	2308      	movs	r3, #8
 800286c:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Input_Floating ;
 800286e:	2301      	movs	r3, #1
 8002870:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	4619      	mov	r1, r3
 8002878:	4843      	ldr	r0, [pc, #268]	; (8002988 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 800287a:	f7ff fd42 	bl	8002302 <MCAL_GPIO_Init>
		if(Global_UART_Config[1]->HW_Flow_Conterl == UART_HW_Flow_Conterl_CTS || Global_UART_Config[1]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS_CTS)
 800287e:	4b43      	ldr	r3, [pc, #268]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	89db      	ldrh	r3, [r3, #14]
 8002884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002888:	d005      	beq.n	8002896 <MCAL_UART_GPIO_Set_Pins+0xf2>
 800288a:	4b40      	ldr	r3, [pc, #256]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	89db      	ldrh	r3, [r3, #14]
 8002890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002894:	d10a      	bne.n	80028ac <MCAL_UART_GPIO_Set_Pins+0x108>
			PINCFG.GPIO_PinNumber = GPIO_PIN_0 ;
 8002896:	2301      	movs	r3, #1
 8002898:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_Input_Floating ;
 800289a:	2301      	movs	r3, #1
 800289c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	4619      	mov	r1, r3
 80028a4:	4838      	ldr	r0, [pc, #224]	; (8002988 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 80028a6:	f7ff fd2c 	bl	8002302 <MCAL_GPIO_Init>
 80028aa:	e066      	b.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
		else if(Global_UART_Config[1]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS || Global_UART_Config[1]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS_CTS)
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	89db      	ldrh	r3, [r3, #14]
 80028b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b6:	d005      	beq.n	80028c4 <MCAL_UART_GPIO_Set_Pins+0x120>
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	89db      	ldrh	r3, [r3, #14]
 80028be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028c2:	d15a      	bne.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
			PINCFG.GPIO_PinNumber = GPIO_PIN_1 ;
 80028c4:	2302      	movs	r3, #2
 80028c6:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 80028c8:	2306      	movs	r3, #6
 80028ca:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PINCFG) ;
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	4619      	mov	r1, r3
 80028d6:	482c      	ldr	r0, [pc, #176]	; (8002988 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 80028d8:	f7ff fd13 	bl	8002302 <MCAL_GPIO_Init>
}
 80028dc:	e04d      	b.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
	else if(USARTx == USART3)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <MCAL_UART_GPIO_Set_Pins+0x1f0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d149      	bne.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
		PINCFG.GPIO_PinNumber = GPIO_PIN_10 ;
 80028e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ea:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 80028ec:	2306      	movs	r3, #6
 80028ee:	73bb      	strb	r3, [r7, #14]
		PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCFG) ;
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	4619      	mov	r1, r3
 80028fa:	4827      	ldr	r0, [pc, #156]	; (8002998 <MCAL_UART_GPIO_Set_Pins+0x1f4>)
 80028fc:	f7ff fd01 	bl	8002302 <MCAL_GPIO_Init>
		PINCFG.GPIO_PinNumber = GPIO_PIN_11 ;
 8002900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002904:	81bb      	strh	r3, [r7, #12]
		PINCFG.GPIO_MODE = GPIO_MODE_Input_Floating ;
 8002906:	2301      	movs	r3, #1
 8002908:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PINCFG) ;
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	4619      	mov	r1, r3
 8002910:	4821      	ldr	r0, [pc, #132]	; (8002998 <MCAL_UART_GPIO_Set_Pins+0x1f4>)
 8002912:	f7ff fcf6 	bl	8002302 <MCAL_GPIO_Init>
		if(Global_UART_Config[2]->HW_Flow_Conterl == UART_HW_Flow_Conterl_CTS || Global_UART_Config[2]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS_CTS)
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	89db      	ldrh	r3, [r3, #14]
 800291c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002920:	d005      	beq.n	800292e <MCAL_UART_GPIO_Set_Pins+0x18a>
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	89db      	ldrh	r3, [r3, #14]
 8002928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800292c:	d10b      	bne.n	8002946 <MCAL_UART_GPIO_Set_Pins+0x1a2>
			PINCFG.GPIO_PinNumber = GPIO_PIN_13 ;
 800292e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002932:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_Input_Floating ;
 8002934:	2301      	movs	r3, #1
 8002936:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PINCFG) ;
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	4619      	mov	r1, r3
 800293e:	4816      	ldr	r0, [pc, #88]	; (8002998 <MCAL_UART_GPIO_Set_Pins+0x1f4>)
 8002940:	f7ff fcdf 	bl	8002302 <MCAL_GPIO_Init>
 8002944:	e019      	b.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
		else if(Global_UART_Config[2]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS || Global_UART_Config[2]->HW_Flow_Conterl == UART_HW_Flow_Conterl_RTS_CTS)
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	89db      	ldrh	r3, [r3, #14]
 800294c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002950:	d005      	beq.n	800295e <MCAL_UART_GPIO_Set_Pins+0x1ba>
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	89db      	ldrh	r3, [r3, #14]
 8002958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800295c:	d10d      	bne.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
			PINCFG.GPIO_PinNumber = GPIO_PIN_14 ;
 800295e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002962:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_Output_AF_Push_pull ;
 8002964:	2306      	movs	r3, #6
 8002966:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PINCFG) ;
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	4619      	mov	r1, r3
 8002972:	4809      	ldr	r0, [pc, #36]	; (8002998 <MCAL_UART_GPIO_Set_Pins+0x1f4>)
 8002974:	f7ff fcc5 	bl	8002302 <MCAL_GPIO_Init>
}
 8002978:	e7ff      	b.n	800297a <MCAL_UART_GPIO_Set_Pins+0x1d6>
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40013800 	.word	0x40013800
 8002988:	40010800 	.word	0x40010800
 800298c:	20002150 	.word	0x20002150
 8002990:	40004400 	.word	0x40004400
 8002994:	40004800 	.word	0x40004800
 8002998:	40010c00 	.word	0x40010c00

0800299c <MCAL_UART_Send_Data>:
 *
 *
 */

void MCAL_UART_Send_Data(USART_Typedef* USARTx , uint16_t* PTXBuffer , enum Polling_Michanism Polling_Enable)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set in the SR
	if(Polling_Enable == Enable)
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <MCAL_UART_Send_Data+0x22>
	{
		while(!(USARTx->USART_SR  & (1<<7))) ;
 80029b0:	bf00      	nop
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f9      	beq.n	80029b2 <MCAL_UART_Send_Data+0x16>
	}

	uint8_t Gindex = Which_UART(USARTx) ;
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff fece 	bl	8002760 <Which_UART>
 80029c4:	4603      	mov	r3, r0
 80029c6:	75fb      	strb	r3, [r7, #23]
		the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
		because it is replaced by the parity.
		When receiving with the parity enabled, the value read in the MSB bit is the received parity
		bit.
	 */
	if(Global_UART_Config[Gindex]->Payload_length == UART_Payload_length_9B){
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <MCAL_UART_Send_Data+0x5c>)
 80029cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d0:	891b      	ldrh	r3, [r3, #8]
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	d106      	bne.n	80029e6 <MCAL_UART_Send_Data+0x4a>
		USARTx->USART_DR = (*PTXBuffer & (uint16_t)0x01FF ) ;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]
	}
	else {
		USARTx->USART_DR = (*PTXBuffer & (uint8_t)0xFF ) ;
	}

}
 80029e4:	e004      	b.n	80029f0 <MCAL_UART_Send_Data+0x54>
		USARTx->USART_DR = (*PTXBuffer & (uint8_t)0xFF ) ;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
}
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20002150 	.word	0x20002150

080029fc <USART1_IRQHandler>:



// ISR
void USART1_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
	Global_UART_Config[0]->P_IRQ_CallBack() ;
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <USART1_IRQHandler+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	4798      	blx	r3

}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20002150 	.word	0x20002150

08002a10 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	Global_UART_Config[1]->P_IRQ_CallBack() ;
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <USART2_IRQHandler+0x10>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4798      	blx	r3


}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20002150 	.word	0x20002150

08002a24 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
	Global_UART_Config[2]->P_IRQ_CallBack() ;
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <USART3_IRQHandler+0x10>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4798      	blx	r3


}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20002150 	.word	0x20002150

08002a38 <Clock_init>:


/***************** General FUNs **************/

void Clock_init(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN() ;
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <Clock_init+0x30>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <Clock_init+0x30>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <Clock_init+0x30>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <Clock_init+0x30>)
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN() ;
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <Clock_init+0x30>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <Clock_init+0x30>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6193      	str	r3, [r2, #24]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40021000 	.word	0x40021000

08002a6c <FunUARTConfig>:

void FunUARTConfig(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
	 * PA10 RX
	 * PA11 CTC
	 * PA12 RTS
	 */
	UART_Config uart1CFG ;
	uart1CFG.BaudRate = UART_BaudRate_115200;
 8002a72:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a76:	607b      	str	r3, [r7, #4]
	uart1CFG.HW_Flow_Conterl = UART_HW_Flow_Conterl_NONE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	81fb      	strh	r3, [r7, #14]
	uart1CFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	743b      	strb	r3, [r7, #16]
	uart1CFG.Parity = UART_Parity_NONE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	817b      	strh	r3, [r7, #10]
	uart1CFG.Payload_length = UART_Payload_length_8B;
 8002a84:	2300      	movs	r3, #0
 8002a86:	813b      	strh	r3, [r7, #8]
	uart1CFG.Stop_Bits = UART_Stop_Bits_1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	81bb      	strh	r3, [r7, #12]
	uart1CFG.UART_Mode = UART_Mode_TX_RX;
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	803b      	strh	r3, [r7, #0]
	MCAL_UART_Init(USART2, &uart1CFG);
 8002a90:	463b      	mov	r3, r7
 8002a92:	4619      	mov	r1, r3
 8002a94:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <FunUARTConfig+0x3c>)
 8002a96:	f7ff fd9b 	bl	80025d0 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART2);
 8002a9a:	4803      	ldr	r0, [pc, #12]	; (8002aa8 <FunUARTConfig+0x3c>)
 8002a9c:	f7ff fe82 	bl	80027a4 <MCAL_UART_GPIO_Set_Pins>

}
 8002aa0:	bf00      	nop
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40004400 	.word	0x40004400

08002aac <FunGPIOConfig>:

void FunGPIOConfig(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
	// Task LED as Output

	GPIO_PinConfig_t PIN13AGF ;
	PIN13AGF.GPIO_PinNumber = GPIO_PIN_13 ;
 8002ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab6:	81bb      	strh	r3, [r7, #12]
	PIN13AGF.GPIO_MODE = GPIO_MODE_Output_push_pull  ;
 8002ab8:	2304      	movs	r3, #4
 8002aba:	73bb      	strb	r3, [r7, #14]
	PIN13AGF.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
	MCAL_GPIO_Init(GPIOA, &PIN13AGF) ;
 8002ac0:	f107 030c 	add.w	r3, r7, #12
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4822      	ldr	r0, [pc, #136]	; (8002b50 <FunGPIOConfig+0xa4>)
 8002ac8:	f7ff fc1b 	bl	8002302 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 0) ;
 8002acc:	2200      	movs	r2, #0
 8002ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ad2:	481f      	ldr	r0, [pc, #124]	; (8002b50 <FunGPIOConfig+0xa4>)
 8002ad4:	f7ff fc94 	bl	8002400 <MCAL_GPIO_WritePin>

	GPIO_PinConfig_t PIN12AGF ;
	PIN12AGF.GPIO_PinNumber = GPIO_PIN_12 ;
 8002ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002adc:	813b      	strh	r3, [r7, #8]
	PIN12AGF.GPIO_MODE = GPIO_MODE_Output_push_pull  ;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	72bb      	strb	r3, [r7, #10]
	PIN12AGF.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_Init(GPIOA, &PIN12AGF) ;
 8002ae6:	f107 0308 	add.w	r3, r7, #8
 8002aea:	4619      	mov	r1, r3
 8002aec:	4818      	ldr	r0, [pc, #96]	; (8002b50 <FunGPIOConfig+0xa4>)
 8002aee:	f7ff fc08 	bl	8002302 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0) ;
 8002af2:	2200      	movs	r2, #0
 8002af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002af8:	4815      	ldr	r0, [pc, #84]	; (8002b50 <FunGPIOConfig+0xa4>)
 8002afa:	f7ff fc81 	bl	8002400 <MCAL_GPIO_WritePin>

	GPIO_PinConfig_t PIN11AGF ;
	PIN11AGF.GPIO_PinNumber = GPIO_PIN_11 ;
 8002afe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b02:	80bb      	strh	r3, [r7, #4]
	PIN11AGF.GPIO_MODE = GPIO_MODE_Output_push_pull  ;
 8002b04:	2304      	movs	r3, #4
 8002b06:	71bb      	strb	r3, [r7, #6]
	PIN11AGF.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PIN11AGF) ;
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480f      	ldr	r0, [pc, #60]	; (8002b50 <FunGPIOConfig+0xa4>)
 8002b12:	f7ff fbf6 	bl	8002302 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0) ;
 8002b16:	2200      	movs	r2, #0
 8002b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <FunGPIOConfig+0xa4>)
 8002b1e:	f7ff fc6f 	bl	8002400 <MCAL_GPIO_WritePin>

	GPIO_PinConfig_t PIN10BGF_Tick ;
	PIN10BGF_Tick.GPIO_PinNumber = GPIO_PIN_10 ;
 8002b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b26:	803b      	strh	r3, [r7, #0]
	PIN10BGF_Tick.GPIO_MODE = GPIO_MODE_Output_push_pull  ;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	70bb      	strb	r3, [r7, #2]
	PIN10BGF_Tick.GPIO_Output_Speed = GPIO_Output_Speed_10M ;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOB, &PIN10BGF_Tick) ;
 8002b30:	463b      	mov	r3, r7
 8002b32:	4619      	mov	r1, r3
 8002b34:	4807      	ldr	r0, [pc, #28]	; (8002b54 <FunGPIOConfig+0xa8>)
 8002b36:	f7ff fbe4 	bl	8002302 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0) ;
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b40:	4804      	ldr	r0, [pc, #16]	; (8002b54 <FunGPIOConfig+0xa8>)
 8002b42:	f7ff fc5d 	bl	8002400 <MCAL_GPIO_WritePin>

}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40010800 	.word	0x40010800
 8002b54:	40010c00 	.word	0x40010c00

08002b58 <main>:

int main(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af02      	add	r7, sp, #8
	Clock_init() ;
 8002b5e:	f7ff ff6b 	bl	8002a38 <Clock_init>
	FunUARTConfig() ;
 8002b62:	f7ff ff83 	bl	8002a6c <FunUARTConfig>
	FunGPIOConfig() ;
 8002b66:	f7ff ffa1 	bl	8002aac <FunGPIOConfig>
	//	                            const configSTACK_DEPTH_TYPE uxStackDepth,
	//	                            void *pvParameters,
	//	                            UBaseType_t uxPriority,
	//	                            TaskHandle_t *pxCreatedTask
	//	                          );
	xTaskCreate(vTask1Handler, " TASK1 ", 128, NULL, 1, xTask1_Handel) ;
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <main+0x98>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	2301      	movs	r3, #1
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	491e      	ldr	r1, [pc, #120]	; (8002bf4 <main+0x9c>)
 8002b7a:	481f      	ldr	r0, [pc, #124]	; (8002bf8 <main+0xa0>)
 8002b7c:	f7fd fee1 	bl	8000942 <xTaskCreate>
	xTaskCreate(vTask2Handler, " TASK2 ", 128, NULL, 2, xTask2_Handel) ;
 8002b80:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <main+0xa4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	2302      	movs	r3, #2
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	491c      	ldr	r1, [pc, #112]	; (8002c00 <main+0xa8>)
 8002b90:	481c      	ldr	r0, [pc, #112]	; (8002c04 <main+0xac>)
 8002b92:	f7fd fed6 	bl	8000942 <xTaskCreate>
	xTaskCreate(vTask3Handler, " TASK3 ", 128, NULL, 3, xTask3_Handel) ;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <main+0xb0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	4919      	ldr	r1, [pc, #100]	; (8002c0c <main+0xb4>)
 8002ba6:	481a      	ldr	r0, [pc, #104]	; (8002c10 <main+0xb8>)
 8002ba8:	f7fd fecb 	bl	8000942 <xTaskCreate>

	// Enable Semaphore to Synch
	xSemaphore1 = xSemaphoreCreateBinary() ;
 8002bac:	2203      	movs	r2, #3
 8002bae:	2100      	movs	r1, #0
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7fd fbeb 	bl	800038c <xQueueGenericCreate>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <main+0xbc>)
 8002bba:	601a      	str	r2, [r3, #0]
	xSemaphore2 = xSemaphoreCreateBinary() ;
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f7fd fbe3 	bl	800038c <xQueueGenericCreate>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <main+0xc0>)
 8002bca:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(xSemaphore1) ;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <main+0xbc>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	f7fd fc41 	bl	800045c <xQueueGenericSend>
	xSemaphoreGive(xSemaphore2) ;
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <main+0xc0>)
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	f7fd fc3a 	bl	800045c <xQueueGenericSend>

	// Start With RTOS Scheduler " NO Return "
	vTaskStartScheduler() ;
 8002be8:	f7fe f87e 	bl	8000ce8 <vTaskStartScheduler>

	/* Loop forever */
	while(1);
 8002bec:	e7fe      	b.n	8002bec <main+0x94>
 8002bee:	bf00      	nop
 8002bf0:	2000215c 	.word	0x2000215c
 8002bf4:	08003018 	.word	0x08003018
 8002bf8:	08002d31 	.word	0x08002d31
 8002bfc:	20002160 	.word	0x20002160
 8002c00:	08003020 	.word	0x08003020
 8002c04:	08002e01 	.word	0x08002e01
 8002c08:	20002164 	.word	0x20002164
 8002c0c:	08003028 	.word	0x08003028
 8002c10:	08002e49 	.word	0x08002e49
 8002c14:	20002168 	.word	0x20002168
 8002c18:	2000216c 	.word	0x2000216c

08002c1c <FunPrintSemaphoreState>:
}

/***************** Function Prototypes **************/

void FunPrintSemaphoreState(char tasknum , char semaphNum , char semaphrstate)
{
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
 8002c26:	460b      	mov	r3, r1
 8002c28:	71bb      	strb	r3, [r7, #6]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	717b      	strb	r3, [r7, #5]
	int counter = 0 ;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
	if(semaphrstate == Taken)
 8002c32:	797b      	ldrb	r3, [r7, #5]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d136      	bne.n	8002ca6 <FunPrintSemaphoreState+0x8a>
	{
		strcpy(UART_Message , "\nTask  : The Semaphore 	 was Taken by Me \n" ) ;
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <FunPrintSemaphoreState+0x108>)
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	469c      	mov	ip, r3
 8002c40:	f104 0e20 	add.w	lr, r4, #32
 8002c44:	4665      	mov	r5, ip
 8002c46:	4626      	mov	r6, r4
 8002c48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c4a:	6028      	str	r0, [r5, #0]
 8002c4c:	6069      	str	r1, [r5, #4]
 8002c4e:	60aa      	str	r2, [r5, #8]
 8002c50:	60eb      	str	r3, [r5, #12]
 8002c52:	3410      	adds	r4, #16
 8002c54:	f10c 0c10 	add.w	ip, ip, #16
 8002c58:	4574      	cmp	r4, lr
 8002c5a:	d1f3      	bne.n	8002c44 <FunPrintSemaphoreState+0x28>
 8002c5c:	4662      	mov	r2, ip
 8002c5e:	4623      	mov	r3, r4
 8002c60:	cb03      	ldmia	r3!, {r0, r1}
 8002c62:	6010      	str	r0, [r2, #0]
 8002c64:	6051      	str	r1, [r2, #4]
 8002c66:	8819      	ldrh	r1, [r3, #0]
 8002c68:	789b      	ldrb	r3, [r3, #2]
 8002c6a:	8111      	strh	r1, [r2, #8]
 8002c6c:	7293      	strb	r3, [r2, #10]

		UART_Message[6] = tasknum ;
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	7193      	strb	r3, [r2, #6]
		UART_Message[23] = semaphNum ;
 8002c74:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002c76:	79bb      	ldrb	r3, [r7, #6]
 8002c78:	75d3      	strb	r3, [r2, #23]

		for(counter =0 ; counter<strlen(UART_Message) ;counter++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e00a      	b.n	8002c96 <FunPrintSemaphoreState+0x7a>
		{
			MCAL_UART_Send_Data(USART2, (UART_Message+counter), Enable) ;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002c84:	4413      	add	r3, r2
 8002c86:	2201      	movs	r2, #1
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4827      	ldr	r0, [pc, #156]	; (8002d28 <FunPrintSemaphoreState+0x10c>)
 8002c8c:	f7ff fe86 	bl	800299c <MCAL_UART_Send_Data>
		for(counter =0 ; counter<strlen(UART_Message) ;counter++)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4822      	ldr	r0, [pc, #136]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002c98:	f7fd fa6a 	bl	8000170 <strlen>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8ed      	bhi.n	8002c80 <FunPrintSemaphoreState+0x64>
		for(counter =0 ; counter<strlen(UART_Message) ;counter++)
		{
			MCAL_UART_Send_Data(USART2, (UART_Message+counter), Enable) ;
		}
	}
}
 8002ca4:	e038      	b.n	8002d18 <FunPrintSemaphoreState+0xfc>
	else if(semaphrstate == Given)
 8002ca6:	797b      	ldrb	r3, [r7, #5]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d135      	bne.n	8002d18 <FunPrintSemaphoreState+0xfc>
		strcpy(UART_Message , "\nTask  : The Semaphore 	 was Given by Me \n" ) ;
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002cae:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <FunPrintSemaphoreState+0x110>)
 8002cb0:	4614      	mov	r4, r2
 8002cb2:	469c      	mov	ip, r3
 8002cb4:	f104 0e20 	add.w	lr, r4, #32
 8002cb8:	4665      	mov	r5, ip
 8002cba:	4626      	mov	r6, r4
 8002cbc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002cbe:	6028      	str	r0, [r5, #0]
 8002cc0:	6069      	str	r1, [r5, #4]
 8002cc2:	60aa      	str	r2, [r5, #8]
 8002cc4:	60eb      	str	r3, [r5, #12]
 8002cc6:	3410      	adds	r4, #16
 8002cc8:	f10c 0c10 	add.w	ip, ip, #16
 8002ccc:	4574      	cmp	r4, lr
 8002cce:	d1f3      	bne.n	8002cb8 <FunPrintSemaphoreState+0x9c>
 8002cd0:	4662      	mov	r2, ip
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	cb03      	ldmia	r3!, {r0, r1}
 8002cd6:	6010      	str	r0, [r2, #0]
 8002cd8:	6051      	str	r1, [r2, #4]
 8002cda:	8819      	ldrh	r1, [r3, #0]
 8002cdc:	789b      	ldrb	r3, [r3, #2]
 8002cde:	8111      	strh	r1, [r2, #8]
 8002ce0:	7293      	strb	r3, [r2, #10]
		UART_Message[6] = tasknum ;
 8002ce2:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	7193      	strb	r3, [r2, #6]
		UART_Message[23] = semaphNum ;
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002cea:	79bb      	ldrb	r3, [r7, #6]
 8002cec:	75d3      	strb	r3, [r2, #23]
		for(counter =0 ; counter<strlen(UART_Message) ;counter++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e00a      	b.n	8002d0a <FunPrintSemaphoreState+0xee>
			MCAL_UART_Send_Data(USART2, (UART_Message+counter), Enable) ;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	480a      	ldr	r0, [pc, #40]	; (8002d28 <FunPrintSemaphoreState+0x10c>)
 8002d00:	f7ff fe4c 	bl	800299c <MCAL_UART_Send_Data>
		for(counter =0 ; counter<strlen(UART_Message) ;counter++)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <FunPrintSemaphoreState+0x104>)
 8002d0c:	f7fd fa30 	bl	8000170 <strlen>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d8ed      	bhi.n	8002cf4 <FunPrintSemaphoreState+0xd8>
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d20:	200021ac 	.word	0x200021ac
 8002d24:	08003030 	.word	0x08003030
 8002d28:	40004400 	.word	0x40004400
 8002d2c:	0800305c 	.word	0x0800305c

08002d30 <vTask1Handler>:

/***************** Task Handler ************/

void vTask1Handler(void *parms)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	int i = 0 , j = 0 ;  // Related to Get DeadLock Example
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
	int xlastWakeTime = xTaskGetTickCount() ;
 8002d40:	f7fe f906 	bl	8000f50 <xTaskGetTickCount>
 8002d44:	4603      	mov	r3, r0
 8002d46:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		//Try to take semaphore1 and Semaphore2 ================  to Solve Deadlock ================

		if(xSemaphoreTake(xSemaphore1 , portMAX_DELAY) == 1)
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <vTask1Handler+0xc4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fc2d 	bl	80005b0 <xQueueSemaphoreTake>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d104      	bne.n	8002d66 <vTask1Handler+0x36>
		{
			FunPrintSemaphoreState('1' , '1' , Taken) ;
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2131      	movs	r1, #49	; 0x31
 8002d60:	2031      	movs	r0, #49	; 0x31
 8002d62:	f7ff ff5b 	bl	8002c1c <FunPrintSemaphoreState>
		}
		if(xSemaphoreTake(xSemaphore2 , portMAX_DELAY) == 1)
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <vTask1Handler+0xc8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fc1e 	bl	80005b0 <xQueueSemaphoreTake>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d104      	bne.n	8002d84 <vTask1Handler+0x54>
		{
			FunPrintSemaphoreState('1' , '2' , Taken) ;
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2132      	movs	r1, #50	; 0x32
 8002d7e:	2031      	movs	r0, #49	; 0x31
 8002d80:	f7ff ff4c 	bl	8002c1c <FunPrintSemaphoreState>
				}
			}
		}
		 */

		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0) ;
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d8a:	481c      	ldr	r0, [pc, #112]	; (8002dfc <vTask1Handler+0xcc>)
 8002d8c:	f7ff fb38 	bl	8002400 <MCAL_GPIO_WritePin>
		vTaskDelay(10) ;
 8002d90:	200a      	movs	r0, #10
 8002d92:	f7fd ff85 	bl	8000ca0 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1) ;
 8002d96:	2201      	movs	r2, #1
 8002d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d9c:	4817      	ldr	r0, [pc, #92]	; (8002dfc <vTask1Handler+0xcc>)
 8002d9e:	f7ff fb2f 	bl	8002400 <MCAL_GPIO_WritePin>
		vTaskDelay(10) ;
 8002da2:	200a      	movs	r0, #10
 8002da4:	f7fd ff7c 	bl	8000ca0 <vTaskDelay>

		if(xSemaphoreGive(xSemaphore1) == 1)
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <vTask1Handler+0xc4>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	2300      	movs	r3, #0
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	f7fd fb53 	bl	800045c <xQueueGenericSend>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d104      	bne.n	8002dc6 <vTask1Handler+0x96>
		{
			FunPrintSemaphoreState('1' , '1' , Given) ;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	2131      	movs	r1, #49	; 0x31
 8002dc0:	2031      	movs	r0, #49	; 0x31
 8002dc2:	f7ff ff2b 	bl	8002c1c <FunPrintSemaphoreState>
		}

		if(xSemaphoreGive(xSemaphore2) == 1)
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <vTask1Handler+0xc8>)
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f7fd fb44 	bl	800045c <xQueueGenericSend>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d104      	bne.n	8002de4 <vTask1Handler+0xb4>
		{
			FunPrintSemaphoreState('1' , '2' , Given) ;
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2132      	movs	r1, #50	; 0x32
 8002dde:	2031      	movs	r0, #49	; 0x31
 8002de0:	f7ff ff1c 	bl	8002c1c <FunPrintSemaphoreState>
		}

		vTaskDelayUntil(&xlastWakeTime , 120) ;
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	2178      	movs	r1, #120	; 0x78
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd ff06 	bl	8000bfc <xTaskDelayUntil>
		if(xSemaphoreTake(xSemaphore1 , portMAX_DELAY) == 1)
 8002df0:	e7aa      	b.n	8002d48 <vTask1Handler+0x18>
 8002df2:	bf00      	nop
 8002df4:	20002168 	.word	0x20002168
 8002df8:	2000216c 	.word	0x2000216c
 8002dfc:	40010800 	.word	0x40010800

08002e00 <vTask2Handler>:

	}
}

void vTask2Handler(void *parms)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	int xLastWakeTime = xTaskGetTickCount() ;
 8002e08:	f7fe f8a2 	bl	8000f50 <xTaskGetTickCount>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 0) ;
 8002e10:	2200      	movs	r2, #0
 8002e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e16:	480b      	ldr	r0, [pc, #44]	; (8002e44 <vTask2Handler+0x44>)
 8002e18:	f7ff faf2 	bl	8002400 <MCAL_GPIO_WritePin>
		vTaskDelay(10) ;
 8002e1c:	200a      	movs	r0, #10
 8002e1e:	f7fd ff3f 	bl	8000ca0 <vTaskDelay>

		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 1) ;
 8002e22:	2201      	movs	r2, #1
 8002e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e28:	4806      	ldr	r0, [pc, #24]	; (8002e44 <vTask2Handler+0x44>)
 8002e2a:	f7ff fae9 	bl	8002400 <MCAL_GPIO_WritePin>
		vTaskDelay(10) ;
 8002e2e:	200a      	movs	r0, #10
 8002e30:	f7fd ff36 	bl	8000ca0 <vTaskDelay>

		vTaskDelayUntil(&xLastWakeTime,120) ;
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	2178      	movs	r1, #120	; 0x78
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fede 	bl	8000bfc <xTaskDelayUntil>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 0) ;
 8002e40:	e7e6      	b.n	8002e10 <vTask2Handler+0x10>
 8002e42:	bf00      	nop
 8002e44:	40010800 	.word	0x40010800

08002e48 <vTask3Handler>:
	}

}

void vTask3Handler(void *parms)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	int xLastWakeTime = xTaskGetTickCount() ;
 8002e50:	f7fe f87e 	bl	8000f50 <xTaskGetTickCount>
 8002e54:	4603      	mov	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]
		 */

		// ================ Solve Deadlock ================

		// Take Semaphore 1
		if(xSemaphoreTake(xSemaphore1 ,portMAX_DELAY) == 1)
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <vTask3Handler+0xbc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fba5 	bl	80005b0 <xQueueSemaphoreTake>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d104      	bne.n	8002e76 <vTask3Handler+0x2e>
		{
			FunPrintSemaphoreState('3' , '1' , Taken) ;
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2131      	movs	r1, #49	; 0x31
 8002e70:	2033      	movs	r0, #51	; 0x33
 8002e72:	f7ff fed3 	bl	8002c1c <FunPrintSemaphoreState>
		}
		// Take Semaphore 2
		if(xSemaphoreTake(xSemaphore2 ,portMAX_DELAY) == 1)
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <vTask3Handler+0xc0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fb96 	bl	80005b0 <xQueueSemaphoreTake>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d104      	bne.n	8002e94 <vTask3Handler+0x4c>
		{
			FunPrintSemaphoreState('3' , '2' , Taken) ;
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2132      	movs	r1, #50	; 0x32
 8002e8e:	2033      	movs	r0, #51	; 0x33
 8002e90:	f7ff fec4 	bl	8002c1c <FunPrintSemaphoreState>
		}

		// Toggle P11
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0) ;
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e9a:	481c      	ldr	r0, [pc, #112]	; (8002f0c <vTask3Handler+0xc4>)
 8002e9c:	f7ff fab0 	bl	8002400 <MCAL_GPIO_WritePin>
		vTaskDelay(10) ;
 8002ea0:	200a      	movs	r0, #10
 8002ea2:	f7fd fefd 	bl	8000ca0 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1) ;
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002eac:	4817      	ldr	r0, [pc, #92]	; (8002f0c <vTask3Handler+0xc4>)
 8002eae:	f7ff faa7 	bl	8002400 <MCAL_GPIO_WritePin>
		vTaskDelay(10) ;
 8002eb2:	200a      	movs	r0, #10
 8002eb4:	f7fd fef4 	bl	8000ca0 <vTaskDelay>

		// Give Semaphore 2
		if(xSemaphoreGive(xSemaphore2) == 1)
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <vTask3Handler+0xc0>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	f7fd facb 	bl	800045c <xQueueGenericSend>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d104      	bne.n	8002ed6 <vTask3Handler+0x8e>
		{
			FunPrintSemaphoreState('3' , '2' , Given) ;
 8002ecc:	2201      	movs	r2, #1
 8002ece:	2132      	movs	r1, #50	; 0x32
 8002ed0:	2033      	movs	r0, #51	; 0x33
 8002ed2:	f7ff fea3 	bl	8002c1c <FunPrintSemaphoreState>
		}

		// Give Semaphore 1
		if(xSemaphoreGive(xSemaphore1) == 1)
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <vTask3Handler+0xbc>)
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	2200      	movs	r2, #0
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f7fd fabc 	bl	800045c <xQueueGenericSend>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d104      	bne.n	8002ef4 <vTask3Handler+0xac>
		{
			FunPrintSemaphoreState('3' , '1' , Given) ;
 8002eea:	2201      	movs	r2, #1
 8002eec:	2131      	movs	r1, #49	; 0x31
 8002eee:	2033      	movs	r0, #51	; 0x33
 8002ef0:	f7ff fe94 	bl	8002c1c <FunPrintSemaphoreState>
		}
		vTaskDelayUntil(&xLastWakeTime,120) ;
 8002ef4:	f107 030c 	add.w	r3, r7, #12
 8002ef8:	2178      	movs	r1, #120	; 0x78
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fe7e 	bl	8000bfc <xTaskDelayUntil>
		if(xSemaphoreTake(xSemaphore1 ,portMAX_DELAY) == 1)
 8002f00:	e7aa      	b.n	8002e58 <vTask3Handler+0x10>
 8002f02:	bf00      	nop
 8002f04:	20002168 	.word	0x20002168
 8002f08:	2000216c 	.word	0x2000216c
 8002f0c:	40010800 	.word	0x40010800

08002f10 <vApplicationTickHook>:
	}
}

void vApplicationTickHook( void )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0) ;
 8002f14:	2200      	movs	r2, #0
 8002f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <vApplicationTickHook+0x20>)
 8002f1c:	f7ff fa70 	bl	8002400 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1) ;
 8002f20:	2201      	movs	r2, #1
 8002f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f26:	4802      	ldr	r0, [pc, #8]	; (8002f30 <vApplicationTickHook+0x20>)
 8002f28:	f7ff fa6a 	bl	8002400 <MCAL_GPIO_WritePin>
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40010c00 	.word	0x40010c00

08002f34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f36:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f3e:	490d      	ldr	r1, [pc, #52]	; (8002f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f40:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <LoopForever+0xe>)
  movs r3, #0
 8002f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f44:	e002      	b.n	8002f4c <LoopCopyDataInit>

08002f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4a:	3304      	adds	r3, #4

08002f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f50:	d3f9      	bcc.n	8002f46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <LoopForever+0x16>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f58:	e001      	b.n	8002f5e <LoopFillZerobss>

08002f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f5c:	3204      	adds	r2, #4

08002f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f60:	d3fb      	bcc.n	8002f5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f62:	f000 f811 	bl	8002f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f66:	f7ff fdf7 	bl	8002b58 <main>

08002f6a <LoopForever>:

LoopForever:
    b LoopForever
 8002f6a:	e7fe      	b.n	8002f6a <LoopForever>
  ldr   r0, =_estack
 8002f6c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f74:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002f78:	080030a8 	.word	0x080030a8
  ldr r2, =_sbss
 8002f7c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002f80:	200021e8 	.word	0x200021e8

08002f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f84:	e7fe      	b.n	8002f84 <ADC1_2_IRQHandler>
	...

08002f88 <__libc_init_array>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	2500      	movs	r5, #0
 8002f8c:	4e0c      	ldr	r6, [pc, #48]	; (8002fc0 <__libc_init_array+0x38>)
 8002f8e:	4c0d      	ldr	r4, [pc, #52]	; (8002fc4 <__libc_init_array+0x3c>)
 8002f90:	1ba4      	subs	r4, r4, r6
 8002f92:	10a4      	asrs	r4, r4, #2
 8002f94:	42a5      	cmp	r5, r4
 8002f96:	d109      	bne.n	8002fac <__libc_init_array+0x24>
 8002f98:	f000 f82e 	bl	8002ff8 <_init>
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	4e0a      	ldr	r6, [pc, #40]	; (8002fc8 <__libc_init_array+0x40>)
 8002fa0:	4c0a      	ldr	r4, [pc, #40]	; (8002fcc <__libc_init_array+0x44>)
 8002fa2:	1ba4      	subs	r4, r4, r6
 8002fa4:	10a4      	asrs	r4, r4, #2
 8002fa6:	42a5      	cmp	r5, r4
 8002fa8:	d105      	bne.n	8002fb6 <__libc_init_array+0x2e>
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fb0:	4798      	blx	r3
 8002fb2:	3501      	adds	r5, #1
 8002fb4:	e7ee      	b.n	8002f94 <__libc_init_array+0xc>
 8002fb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fba:	4798      	blx	r3
 8002fbc:	3501      	adds	r5, #1
 8002fbe:	e7f2      	b.n	8002fa6 <__libc_init_array+0x1e>
 8002fc0:	080030a0 	.word	0x080030a0
 8002fc4:	080030a0 	.word	0x080030a0
 8002fc8:	080030a0 	.word	0x080030a0
 8002fcc:	080030a4 	.word	0x080030a4

08002fd0 <memcpy>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	1e43      	subs	r3, r0, #1
 8002fd4:	440a      	add	r2, r1
 8002fd6:	4291      	cmp	r1, r2
 8002fd8:	d100      	bne.n	8002fdc <memcpy+0xc>
 8002fda:	bd10      	pop	{r4, pc}
 8002fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fe4:	e7f7      	b.n	8002fd6 <memcpy+0x6>

08002fe6 <memset>:
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4402      	add	r2, r0
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d100      	bne.n	8002ff0 <memset+0xa>
 8002fee:	4770      	bx	lr
 8002ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff4:	e7f9      	b.n	8002fea <memset+0x4>
	...

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
